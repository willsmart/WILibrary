
Singletons
    DataRegistry rootDataRegistry={return(!rootDataRegistry?rootDataRegistry=[[DataRegistry alloc] init]:rootDataRegistry);}=nil (ivar=rootDataRegistry)



DataViewer_ProxyDictionaryDelegate<ProxyDictionaryDelegate,MutableDictionaryDelegateWithEqualsCheck> "basic_=>dataViewer_"

<DataViewer_ProxiedDictionaryDelegate:ProxiedDictionaryDelegate> "basic_=>dataViewer_"

DataViewerProperties_SourcedProxyDictionaryDelegate<SourcedProxyDictionaryDelegate,MutableDictionaryDelegateWithEqualsCheck> "basic_=>dataViewerProperties_"

<DataViewerProperties_SourcedProxiedDictionaryDelegate:SourcedProxiedDictionaryDelegate> "basic_=>dataViewerProperties_"




DataRegistryParentValueDelegate<MutableValueDelegate>
    DataRegistry owner=nil (assign,ivar=owner)
    Self initWithOwner:(DataRegistry*)aowner "super init" {
        owner=aowner;
    }
    -(void)willChangeValueFrom:(id)fromObject to:(id)toObject {
        if (owner) {
            while (owner.propertyStack.count>=2) [owner.propertyStack removeObjectAtIndex:1];
        }
    }
    -(void)didSetValueTo:(id)object {
        if (owner) {
            if ([object isKindOfClass:[DataRegistry class]]) {
                [owner.propertyStack addObject:((DataRegistry*)object).allViewers];
            }
        }
    }




DataRegistryMyViewersSetDelegate<MutableSetDelegate>
    DataRegistry owner=nil (assign,ivar=owner)
    Self initWithOwner:(DataRegistry*)aowner "super init" {
        owner=aowner;
    }
    -(void)didRemoveObject:(id)object {
        NSArray *keys=self.owner.myViewers.allKeys;
        for (kid key in keys) {
            if ([self.owner.myViewers objectForKey:key]==object) {
                [self.owner.myViewers removeObjectForKey:key];
            }
        }
    }
DataRegistryMyViewersDictionaryDelegate<MutableDictionaryDelegate>
    DataRegistry owner=nil (assign,ivar=owner)
    Self initWithOwner:(DataRegistry*)aowner "super init" {
        owner=aowner;
    }
    -(void)didReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying>)key {
        if (fromObject) {
            [self.owner.setOfMyViewers removeObject:fromObject];
        }
        if (toObject) {
            [self.owner.setOfMyViewers addObject:toObject];
        }
    }





DataRegistry<DataViewer_ProxiedDictionaryDelegate,DataViewerProperties_SourcedProxiedDictionaryDelegate,BaseObject>
    viewerInRegistry >s< <DataModelViewer> setOfMyViewer
    WeakMutableDictionary myViewers=[[WeakMutableDictionary alloc] init] (ivar=myViewers,publicreadonly)
    WeakMutableDictionary allViewers=[[WeakMutableDictionary alloc] init] (ivar=allViewers,publicreadonly)
    MutableArray propertyStack=[[MutableArray alloc] init] (publicreadonly,ivar=propertyStack)

    registry -m< ViewerListenerSet viewerListenerSet

    parent -s<~ DataRegistry child

    DataRegistryParentValueDelegate parentDel=[[DataRegistryParentValueDelegate alloc] initWithOwner:self] (publicreadonly,ivar=parentDel)

    Self start {
        @10
        {
            [self.setOfMyViewers addDelegate:[[DataRegistryMyViewersSetDelegate alloc] initWithOwner:self]];
            [self.myViewers addDelegate:[[DataRegistryMyViewersDictionaryDelegate alloc] initWithOwner:self]];
            [self.parent_endpoint addDelegate:parentDel];
            MutableDictionaryUnionDelegate *del=[MutableDictionaryUnionDelegate get];
            del.unionDictionary=allViewers;
            [propertyStack addDelegate:del];
            [propertyStack addObject:myViewers];
        }
    }








    Self start {
        [self dataViewer_attachDictionaryDelegateTo:self.allViewers];
    }

    -(NSObject*)valueForProperty:(NSObject<NSCopying>*)propertyKey inViewer:(NSObject<NSCopying>*)viewerKey {
        if ([propertyKey isEqual:@""]) return([self.allViewers objectForKey:viewerKey]);
        else return([((NSObject<DataModelViewer>*)[self.allViewers objectForKey:viewerKey])._properties objectForKey:propertyKey]);
    }
    -(NSObject*)valueForProperty:(NSString*)propertyNamev {
        return([self valueForProperty:[__Class__ propertyKeyFromProperty:propertyNamev] inViewer:[__Class__ viewerKeyFromProperty:propertyNamev]]);
    }

    -(void)attachListener:(NSObject<NamedDataListener>*)l toProperty:(NSObject<NSCopying>*)propertyKey inViewer:(NSObject<NSCopying>*)viewerKey {
        ViewerListenerSet *mls=[self viewerListenerSetForKey:viewerKey];
        if (!mls) [self setViewerListenerSet:mls=[[ViewerListenerSet alloc] init] forKey:viewerKey];
        ViewerPropertyListenerSet *mpls=[mls viewerPropertyListenerSetForKey:propertyKey];
        if (!mpls) [mls setViewerPropertyListenerSet:mpls=[[ViewerPropertyListenerSet alloc] init] forKey:propertyKey];
        [mpls addNamedDataListener:l];
    }

    -(void)attachListener:(NSObject<NamedDataListener>*)l toProperty:(NSString*)propertyNamev {
        [self attachListener:l toProperty:[__Class__ propertyKeyFromProperty:propertyNamev] inViewer:[__Class__ viewerKeyFromProperty:propertyNamev]];
    }

    +(NSString*)propertyNameForProperty:(NSObject<NSCopying>*)propertyKey inViewer:(NSObject<NSCopying>*)viewerKey {
        if (!([propertyKey isKindOfClass:[NSString class]]&&
        [viewerKey isKindOfClass:[NSString class]]
        )) return(nil);
        return([NSString stringWithFormat:@"%@::%@",viewerKey,propertyKey]);
    }
    
    +(NSString*)viewerKeyFromProperty:(NSString*)propertyNamev {
        NSRange r=[propertyNamev rangeOfString:@"::"];
        return(r.location==NSNotFound?@"app":[propertyNamev substringToIndex:r.location]);
    }
    +(NSString*)viewerKeyOrNilFromProperty:(NSString*)propertyNamev {
        NSRange r=[propertyNamev rangeOfString:@"::"];
        return(r.location==NSNotFound?nil:[propertyNamev substringToIndex:r.location]);
    }
    +(NSString*)propertyKeyFromProperty:(NSString*)propertyNamev {
        NSRange r=[propertyNamev rangeOfString:@"::"];
        return(r.location==NSNotFound?propertyNamev:[propertyNamev substringFromIndex:r.location+r.length]);
    }

    -(void)dataViewer_willReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying>)key {
        NSObject<DataModelViewer> *tov=(NSObject<DataModelViewer>*)toObject;
        NSObject<DataModelViewer> *fromv=(NSObject<DataModelViewer>*)fromObject;

        [self willChangeValueOfProperty:@"" inViewer:(NSObject<NSCopying>*)key from:fromv to:tov];

        if (tov) {
            if (fromv) {
                NSSet *inss=nil,*dels=nil,*changes=nil;
                if ([Util getInsertsDeletesAndChangesForDictionaryWhenChanging:fromv._properties to:tov._properties insKeys:&inss delKeys:&dels changeKeys:&changes]) {
                    for (NSObject<NSCopying> *propertyKey in dels) {
                        [self willChangeValueOfProperty:propertyKey inViewer:(NSObject<NSCopying>*)key from:(NSObject*)[fromv._properties objectForKey:propertyKey] to:nil];
                    }
                    for (NSObject<NSCopying> *propertyKey in inss) {
                        [self willChangeValueOfProperty:propertyKey inViewer:(NSObject<NSCopying>*)key from:nil to:(NSObject*)[tov._properties objectForKey:propertyKey]];
                    }
                    for (NSObject<NSCopying> *propertyKey in changes) {
                        [self willChangeValueOfProperty:propertyKey inViewer:(NSObject<NSCopying>*)key from:(NSObject*)[fromv._properties objectForKey:propertyKey] to:(NSObject*)[tov._properties objectForKey:propertyKey]];
                    }
                }
            }
            else {
                for (NSObject<NSCopying> *propertyKey in tov._properties) {
                    [self willChangeValueOfProperty:propertyKey inViewer:(NSObject<NSCopying>*)key from:nil to:(NSObject*)[tov._properties objectForKey:propertyKey]];
                }
            }
        }
        else {
            for (NSObject<NSCopying> *propertyKey in fromv._properties) {
                [self willChangeValueOfProperty:propertyKey inViewer:(NSObject<NSCopying>*)key from:(NSObject*)[fromv._properties objectForKey:propertyKey] to:nil];
            }
        }
        [self dataViewerProperties_attachDictionaryDelegateTo:tov._properties forSource:(NSObject<NSCopying>*)key];
    }
    

    -(void)dataViewer_didReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying>)key {
        NSObject<DataModelViewer> *tov=(NSObject<DataModelViewer>*)toObject;
        NSObject<DataModelViewer> *fromv=(NSObject<DataModelViewer>*)fromObject;
        if (tov) {
            if (fromv) {
                NSSet *inss=nil,*dels=nil,*changes=nil;
                if ([Util getInsertsDeletesAndChangesForDictionaryWhenChanging:fromv._properties to:tov._properties insKeys:&inss delKeys:&dels changeKeys:&changes]) {
                    for (NSObject<NSCopying> *propertyKey in dels) {
                        [self didChangeValueOfProperty:propertyKey inViewer:(NSObject<NSCopying>*)key from:(NSObject*)[fromv._properties objectForKey:propertyKey] to:nil];
                    }
                    for (NSObject<NSCopying> *propertyKey in inss) {
                        [self didChangeValueOfProperty:propertyKey inViewer:(NSObject<NSCopying>*)key from:nil to:(NSObject*)[tov._properties objectForKey:propertyKey]];
                    }
                    for (NSObject<NSCopying> *propertyKey in changes) {
                        [self didChangeValueOfProperty:propertyKey inViewer:(NSObject<NSCopying>*)key from:(NSObject*)[fromv._properties objectForKey:propertyKey] to:(NSObject*)[tov._properties objectForKey:propertyKey]];
                    }
                }
            }
            else {
                for (NSObject<NSCopying> *propertyKey in tov._properties) {
                    [self didChangeValueOfProperty:propertyKey inViewer:(NSObject<NSCopying>*)key from:nil to:(NSObject*)[tov._properties objectForKey:propertyKey]];
                }
            }
        }
        else {
            for (NSObject<NSCopying> *propertyKey in fromv._properties) {
                [self didChangeValueOfProperty:propertyKey inViewer:(NSObject<NSCopying>*)key from:(NSObject*)[fromv._properties objectForKey:propertyKey] to:nil];
            }
        }

        [self didChangeValueOfProperty:@"" inViewer:(NSObject<NSCopying>*)key from:fromv to:tov];
    }
    
    -(void)dataViewer_stateOK {
        [self namedDataStateOK];
    }
    -(void)dataViewerProperties_willReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying>)key source:(NSObject<NSCopying>*)source {
        [self willChangeValueOfProperty:(NSObject<NSCopying>*)key inViewer:source from:(NSObject*)fromObject to:(NSObject*)toObject];
    }
    -(void)dataViewerProperties_didReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying>)key source:(NSObject<NSCopying>*)source {
        [self didChangeValueOfProperty:(NSObject<NSCopying>*)key inViewer:source from:(NSObject*)fromObject to:(NSObject*)toObject];
    }
    -(void)dataViewerProperties_stateOKForSource:(NSObject<NSCopying>*)source {
        if ([viewersThatChanged containsObject:source]) {
            [[self viewerListenerSetForKey:source] namedDataStateOK];
            [viewersThatChanged removeObject:source];
        }
    }


    
    NSMutableSet viewersThatChanged=[[NSMutableSet alloc] init] (readonly)


    -(void)willChangeValueOfProperty:(NSObject<NSCopying>*)propertyKey inViewer:(NSObject<NSCopying>*)viewerKey from:(NSObject*)fromValue to:(NSObject*)toValue {
        ViewerListenerSet *ls=[self viewerListenerSetForKey:viewerKey];
        if (ls) {
            [viewersThatChanged addObject:viewerKey];
            [ls willChangeValueOfProperty:propertyKey from:fromValue to:toValue];
        }
    }
    -(void)didChangeValueOfProperty:(NSObject<NSCopying>*)propertyKey inViewer:(NSObject<NSCopying>*)viewerKey from:(NSObject*)fromValue to:(NSObject*)toValue {
        [[self viewerListenerSetForKey:viewerKey] didChangeValueOfProperty:propertyKey from:fromValue to:toValue];
    }

    -(void)namedDataStateOK {
        for (NSObject<NSCopying> *viewerKey in viewersThatChanged) {
            [[self viewerListenerSetForKey:viewerKey] namedDataStateOK];
        }
        [viewersThatChanged removeAllObjects];
    }



ViewerListenerSet
    Self init {}
    viewerListenerSet -m<~ ViewerPropertyListenerSet viewerPropertyListenerSet
    NSMutableSet propertiesThatChanged=[[NSMutableSet alloc] init] (readonly)

    -(void)willChangeValueOfProperty:(NSObject<NSCopying>*)propertyKey from:(NSObject*)fromValue to:(NSObject*)toValue {
        ViewerPropertyListenerSet *ls=[self viewerPropertyListenerSetForKey:propertyKey];
        if (ls) {
            [propertiesThatChanged addObject:propertyKey];
            [ls willChangeValueFrom:fromValue to:toValue];
        }
    }
    -(void)didChangeValueOfProperty:(NSObject<NSCopying>*)propertyKey from:(NSObject*)fromValue to:(NSObject*)toValue {
        [[self viewerPropertyListenerSetForKey:propertyKey] didChangeValueFrom:fromValue to:toValue];
    }
    -(void)namedDataStateOK {
        for (NSObject<NSCopying> *propertyKey in propertiesThatChanged) {
            ViewerPropertyListenerSet *ls=[self viewerPropertyListenerSetForKey:propertyKey];
            [ls namedDataStateOK];
        }
        [propertiesThatChanged removeAllObjects];
    }

ViewerPropertyListenerSet
    Self init {}
    namedDataListenerSet >s<~ <NamedDataListener> namedDataListener

    -(void)willChangeValueFrom:(NSObject*)fromValue to:(NSObject*)toValue {
        NSString *propertyNamev=self.propertyName;
        for (NSObject<NamedDataListener> *l in self.namedDataListeners) {
            [l willChangeValueOfProperty:(NSObject<NSCopying>*)self.keyInViewerListenerSet inViewer:(NSObject<NSCopying>*)self.viewerListenerSet.keyInRegistry from:fromValue to:toValue];
            if (propertyNamev) [l willChangeValueOfProperty:propertyNamev from:fromValue to:toValue];
        }
    }
    -(void)didChangeValueFrom:(NSObject*)fromValue to:(NSObject*)toValue {
        NSString *propertyNamev=self.propertyName;
        for (NSObject<NamedDataListener> *l in self.namedDataListeners) {
            if (propertyNamev) [l didChangeValueOfProperty:propertyNamev from:fromValue to:toValue];
            [l didChangeValueOfProperty:(NSObject<NSCopying>*)self.keyInViewerListenerSet inViewer:(NSObject<NSCopying>*)self.viewerListenerSet.keyInRegistry from:fromValue to:toValue];
        }
    }
    -(void)namedDataStateOK {
        for (NSObject<NamedDataListener> *l in self.namedDataListeners) {
            [l namedDataStateOK];
        }
    }

    NSString propertyName={
        return([DataRegistry propertyNameForProperty:(NSObject<NSCopying>*)self.keyInViewerListenerSet inViewer:(NSObject<NSCopying>*)self.viewerListenerSet.keyInRegistry]);
    }




<NamedDataListener:Meta_ProxiedDictionaryDelegate>
    DataRegistry dataRegistry=
        {return(dataRegistry?dataRegistry:g_singletons.rootDataRegistry);}
        -v{
            if (v==g_singletons.rootDataRegistry) v=nil;
            if (v!=dataRegistry) {
                NSSet *ns=self.propertyNamesListenedTo;
                [self.namedDataListenerSets removeAllObjects];
                dataRegistry=v;
                self.propertyNamesListenedTo=ns;
            }
        }=nil (ivar=dataRegistry)

    NSSet propertyNamesListenedTo=
        {
            NSMutableSet *s=[NSMutableSet set];
            for (ViewerPropertyListenerSet *ls in self.namedDataListenerSets) {
                [s addObject:ls.propertyName];
            }
            return(s);
        }
        -v{
            NSSet *inss=nil,*dels=nil;
            if ([Util getInsertsAndDeletesForSetWhenChanging:self.propertyNamesListenedTo to:v inss:&inss dels:&dels]) {
                if (dels.count) {
                    NSMutableSet *dellss=[[NSMutableSet alloc] init];
                    for (ViewerPropertyListenerSet *ls in self.namedDataListenerSets) if ([dels containsObject:ls.propertyName]) [dellss addObject:ls];
                    [self.namedDataListenerSets minusSet:dellss];
                }
                for (NSObject *o in inss) if ([o isKindOfClass:[NSString class]]) {
                    [self.dataRegistry attachListener:self toProperty:(NSString*)o];
                }
            }
        }
                    
            
    -(void)willChangeValueOfProperty:(NSObject<NSCopying>*)propertyKey inViewer:(NSObject<NSCopying>*)viewerKey from:(NSObject*)fromValue to:(NSObject*)toValue {}
    -(void)didChangeValueOfProperty:(NSObject<NSCopying>*)propertyKey inViewer:(NSObject<NSCopying>*)viewerKey from:(NSObject*)fromValue to:(NSObject*)toValue {}
    -(void)willChangeValueOfProperty:(NSString*)propertyNamev from:(NSObject*)fromValue to:(NSObject*)toValue {}
    -(void)didChangeValueOfProperty:(NSString*)propertyNamev from:(NSObject*)fromValue to:(NSObject*)toValue {}
    -(void)namedDataStateOK {}



