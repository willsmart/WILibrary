//"<UIKit/UIKit.h>"
"<Foundation/Foundation.h>"




/*top:
#define MaxDictWordLength 63
#define HPFloatForFloat(f) ((WRD)((((*(DWRD*)&f)&0x80000000)>>16)|((MIN(MAX((((*(DWRD*)&f)>>23)&0xff),0x70),0x8f)-0x70)<<10)|(((*(DWRD*)&f)&0x7fffff)>>13)))
#define FloatDWRDForHPFloat(f) ((DWRD)((((*(WRD*)&f)&0x8000)<<16)|(((((*(WRD*)&f)>>10)&0x1f)+0x70)<<23)|(((*(WRD*)&f)&0x3ff)<<13)))
*/


type DictWord "typedef:struct{
    char word[MaxDictWordLength+1];
    float freq;
    ULL lengthMask;
}"
type DictWordArray "typedef:Array<DictWord>"
type ULLArray "typedef:Array<ULL>"

DictWords {
    -(init)init {}
    
    int maxLen=0,wordLimit=10000000
    DictWordArray *_words=nil (readonly)
    
    -(bool)validWord:(const char*)pc {
        for (;*pc;pc++) if ((pc[0]!='\'')&&(pc[0]!='-')&&((pc[0]<'a')||(pc[0]>'z'))&&((pc[0]<'A')||(pc[0]>'Z'))) return(NO);
        return(YES);
    }

    -(void)readWordsFromOldStyleDictionary {
        if (!_words) _words=NEW(DictWordArray);
        
        Dictionary *dict=[Dictionary getDefault];
        _words->setUpperBound(MIN(wordLimit,dict.numWords)-1);

        unsigned short **wps=dict.wordAddrs;
        
        int wi=0;
        IterateArray(DictWord,w,*_words,
            UnpackedWord wd;
            unsigned short *ps=wps[wIndex];
            unpackWord(&ps,&wd);
            
            strcpy(w.word,wd.word);
            w.freq=wd.freq;
            w.lengthMask=0;
        );
        FilterArray(DictWord,w,*_words,    [self validWord:w.word]);
    }
    
    -(int)intFromChar:(char)c {
        return(c=='\''?1:(c=='-'?2:((c>='a')&&(c<='z')?c+3-'a':(c+3+26-'A'))));
    }
    
    -(long)intFromWord:(const char*)pc {
        long ret=0;
        for (int b=18;(*pc)&&(b>=0);pc++,b-=6) ret|=[self intFromChar:*pc]<<b;
        return(ret);
    }
    -(int)compareWord:(const char*)a to:(const char*)b {
        while ((*a)&&*b) {
            int i=[self intFromChar:*a]-[self intFromChar:*b];
            if (i<0) return(-1);
            if (i>0) return(1);
            a++;b++;
        }
        if (*a) {
            return(1);
        }
        else if (*b) return(-1);
        else return(0);
    }

    -(void)sortWordsAlphabetically {
        if (!_words) return;
        DictWord *wds=_words->a;
        
        IntArray a,aa;
        Array<long> tmpa;
        aa.setUpperBound(_words->upperBound());
        IterateArray(int,i,aa,   i=(int)iIndex;);
        
        linearSort(int,aa,a,   [self intFromWord:wds[obj].word]    ,  tmpa);
        
        int jIndex=0,tmpi;
        long jWdi=0;
        IterateArray(int,i,a,
            if (jIndex==iIndex) jWdi=[self intFromWord:wds[a.a[jIndex]].word];
            if ((iIndex==a.upperBound())||[self intFromWord:wds[a.a[iIndex+1]].word]!=jWdi) {
                if (iIndex!=jIndex) {
                    arrHeapSortb(int,a,    [self compareWord:wds[obja].word to:wds[objb].word]<0,   jIndex,iIndex,tmpi);
                }
                jIndex=(int)iIndex+1;
            }
        );
        DictWordArray *words=NEW(DictWordArray);
        FilterToArray(int,i,a,    DictWord,w,*words,   true,    w=_words->a[i];);
        (*_words)=*words;
        IterateArray(DictWord,w,*_words, prnt("sw: %s %f %qx\n",w.word,w.freq,w.lengthMask););
        prnt("%ld sorted words",_words->num());
    }
    
    NSString binfn=@"dict.bin" (ivar=binfn)
    
    -(bool)writeBin {
        if (!_words) return(NO);
        
        FILE *fil=fopen(binfn.UTF8String,"wb");
        if (!fil) {
            NSLog(@"Could not open %@ for writing",binfn);
            return(NO);
        }
        bool debug=NO;
        ULL ull=0;BYT shft=0;int wdi=0;
        [self writeBinWithFil:fil ull:&ull shft:&shft wdi:&wdi depth:0];
        WRITEBITS("end",0,64,fil,ull,shft);
        printf("Wrote %ld bytes to %s\n",ftell(fil),binfn.UTF8String);
        fclose(fil);
        
        if (_ulls) DELETE(ULLArray,_ulls);
        [self startIterateWords];
        DictWord w;
        while (YES) {
            w=self.nextWord;
            if (!w.word[0]) break;
            prnt("rw: %s %f %qx\n",w.word,w.freq,w.lengthMask);
        }
        return(YES);
    }

    -(void)writeBinWithFil:(FILE*)fil ull:(ULL*)pull shft:(BYT*)pshft wdi:(int*)pwdi depth:(int)depth {
        int &wdi=*pwdi;ULL &ull=*pull;BYT &shft=*pshft;
        DictWord &w=_words->a[wdi];

        //prnt("\n");for (int d=0;d<depth;d++) prnt("  ");prnt("%s\n",w.word);
        
        bool debug=YES;
        
        if (!w.word[depth]) {
            prnt("wr: %s %f %qx\n",w.word,w.freq,w.lengthMask);
            WRITEBITS("haswd?",1,1,fil,ull,shft);
            float f=w.freq;
            WRD hpf=HPFloatForFloat(f);
            WRITEBITS("freq",hpf,16,fil,ull,shft);
            int minl=0;
            for (ULL bit=1;bit&&!(w.lengthMask&bit);bit<<=1,minl++);
            WRITEBITS("fromlen",MIN(31,minl),5,fil,ull,shft);
            wdi++;
        }
        else WRITEBITS("haswd?",0,1,fil,ull,shft);
        
        int ci,ciWas=0;char c;
        for (ci=0;ci<28+26;ci++) {
            if ((wdi>=_words->num())||(depth&&(_words->a[wdi].word[depth-1]!=w.word[depth-1]))) break;
            c=(ci==0?'\'':(ci==1?'-':(ci<28?ci+'a'-2:(ci+'A'-28))));
            //prnt(" %c",c);
            if (c==_words->a[wdi].word[depth]) {
                WRITEBITS("anotherch?",1,1,fil,ull,shft);

                if (ci-ciWas) {
                    WRITEBITS("hasskip?",1,1,fil,ull,shft);
                    WRITEBITS("skip01",(ci-ciWas)&3,2,fil,ull,shft);
                    if (ci-ciWas<4) WRITEBITS("has234",0,1,fil,ull,shft);
                    else {
                        WRITEBITS("has234",1,1,fil,ull,shft);
                        if (ci-ciWas<32) {
                            WRITEBITS("skip234",(ci-ciWas)>>2,3,fil,ull,shft);
                        }
                        else {
                            WRITEBITS("skip234z",0,3,fil,ull,shft);
                            WRITEBITS("skip2345",(ci-ciWas)>>2,4,fil,ull,shft);
                        }
                    }
                }
                else {
                    WRITEBITS("hasskip?",0,1,fil,ull,shft);
                }
                [self writeBinWithFil:fil ull:pull shft:pshft wdi:pwdi depth:depth+1];
                ciWas=ci+1;
            }
        }
        WRITEBITS("anotherch?",0,1,fil,ull,shft);
    }
        

    -(void)readBin {
        int N=0;
        [self startIterateWords];
        DictWord w;
        while (YES) {
            w=self.nextWord;
            if (!w.word[0]) break;
            N++;
        }

        if (!_words) _words=NEW(DictWordArray);
        _words->setUpperBound(N-1);

        int i=0;
        [self startIterateWords];
        while (YES) {
            w=self.nextWord;
            if (!w.word[0]) break;
            _words->a[i++]=w;
            prnt("rw: %s %f %qx\n",w.word,w.freq,w.lengthMask);
        }
    }
        

    
    ULLArray *_ulls=nil (readonly)
    ULL *ulls_pull=nil
    BYT ulls_shft=0
    int ulls_depth=0,ulls_state=0
    DictWord ulls_word,ulls_ciword (nodef)
    
    ULLArray *ulls={
        if (!_ulls) {
            _ulls=NEW(ULLArray);
            
            FILE *fil=fopen(binfn.UTF8String,"rb");
            if (fil) {
                fseek(fil,0,SEEK_END);
                long len=ftell(fil);
                _ulls->setUpperBound(len/8-1);
                fseek(fil,0,SEEK_SET);
                if (fread(_ulls->a,8,_ulls->num(),fil)<_ulls->num()) {
                    _ulls->clear();
                }
                fclose(fil);
            }
        }
        return(_ulls);
    }
    
    -(void)startIterateWords {
        ulls_pull=self.ulls->a;
        ulls_shft=0;
        ulls_depth=0;ulls_state=0;
        ulls_ciword.word[0]=0;
    }
    DictWord nextWord={
        bool debug=YES;
        ULL v;

        while (YES) {
            switch (ulls_state) {
                case 0:{
                    READBITS("haswd?",ULL,v,1,ulls_pull,ulls_shft);
                    if (v&1) {
                        WRD hpf;
                        READBITS("freq",WRD,hpf,16,ulls_pull,ulls_shft);
                        int minl;
                        READBITS("fromlen",int,minl,5,ulls_pull,ulls_shft);
                        memset(&ulls_word,0,sizeof(ulls_word));
                        for (int d=0;d<ulls_depth;d++) {
                            int ci=ulls_ciword.word[d];
                            ulls_word.word[d]=(char)(ci==0?'\'':(ci==1?'-':(ci<28?ci+'a'-2:(ci+'A'-28))));
                        }
                        DWRD dw=FloatDWRDForHPFloat(hpf);
                        ulls_word.freq=*(float*)&dw;
                        ulls_word.lengthMask=leftOnes[64-minl];
                        ulls_state=1;
                        return(ulls_word);
                    }
                    else ulls_state=1;
                }break;
                case 1:{
                    READBITS("anotherch?",ULL,v,1,ulls_pull,ulls_shft);
                    if (v&1) {
                        READBITS("hasskip?",ULL,v,1,ulls_pull,ulls_shft);
                        if (v&1) {
                            int skipLow=0,skipHigh=0;
                            READBITS("skip01",int,skipLow,2,ulls_pull,ulls_shft);
                            READBITS("hasskip234?",ULL,v,1,ulls_pull,ulls_shft);
                            if (v&1) {
                                READBITS("skip234",int,skipHigh,3,ulls_pull,ulls_shft);
                                if (!skipHigh) {
                                    READBITS("skip2345",int,skipHigh,4,ulls_pull,ulls_shft);
                                }
                            }
                            ulls_ciword.word[ulls_depth]+=(skipHigh<<2)|skipLow;
                        }
                        ulls_ciword.word[++ulls_depth]=0;
                        ulls_state=0;
                    }
                    else {
                        if (!ulls_depth) {
                            ulls_word.word[0]=0;
                            return(ulls_word);
                        }
                        ulls_ciword.word[--ulls_depth]++;
                    }
                }break;
            }
        }
    }
                









