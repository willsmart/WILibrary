

Globals
    -top
        #define OID_marker (0xbad0fad0dad0cad0LL)
        #define __Derived_CClass__ (class_getName([self class]))
        #define __Derived_Class__ [NSString stringWithFormat:@"%s",__Derived_CClass__]
        #ifndef OWNER_TRACKING_ON
        #define OWNER_TRACKING_ON NO
        #endif

"<pthread.h>"
"<libkern/OSAtomic.h>"

<ThreadKey> "multi" "nac"
    -decl:{
        extern pthread_key_t ThreadKey_key_keyName;
        extern valueType getThreadValueNamedKeyName();
        extern valueType setThreadValueNamedKeyName(valueType v);
    }
    -decl:impl:{
        pthread_key_t ThreadKey_key_keyName=0;
        valueType getThreadValueNamedKeyName() {
            if (!ThreadKey_key_keyName)  pthread_key_create(&ThreadKey_key_keyName,nil);
            return((valueType)(ULL)pthread_getspecific(ThreadKey_key_keyName));
        }
        valueType setThreadValueNamedKeyName(valueType v) {
            if (!ThreadKey_key_keyName)  pthread_key_create(&ThreadKey_key_keyName,nil);
            valueType ret=(valueType)(ULL)pthread_getspecific(ThreadKey_key_keyName);
            pthread_setspecific(ThreadKey_key_keyName,(const void*)(ULL)v);
            return(ret);
        }
    }

Globals
    -each:impl
        #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
        #endif
        #define _PrivateAccessMask_ __private_access_thread_mask_in___ClassName__

ThreadIDKey<ThreadKey> "keyName=>id" "valueType=>Int" "nac"
    -decl:{
        extern Int g_prevThreadId;
        Int getThreadId();
        ULL getThreadMask();

        NOSWIFT(
        bool authorized_thread(ULL&mask);
        bool authorize_thread(ULL&mask);
        void deauthorize_thread(ULL&mask);
        #define privateaccess(...) do {bool __needdeauth=authorize_thread(_PrivateAccessMask_);{__VA_ARGS__;}if (__needdeauth) deauthorize_thread(_PrivateAccessMask_);} while (false)
        )
    }
    -decl:impl:{
        Int g_prevThreadId=0;
        ULL getThreadMask() {
            Int ret=getThreadValueNamedId();
            if (!ret) setThreadValueNamedId(ret=++g_prevThreadId);
            return(1LL<<(ret-1));
        }
        Int getThreadId() {
            Int ret=getThreadValueNamedId();
            if (!ret) setThreadValueNamedId(ret=++g_prevThreadId);
            return(ret);
        }

        NOSWIFT(
        bool authorized_thread(ULL&mask) {
            ULL tmask=getThreadMask();
            if (!tmask) ERR("Too many threads for this implementation of publicreadonly properties (64)");
            else {
                if (mask&tmask) {
//                    mask&=~tmask;
                    return(YES);
                }
            }
            return(NO);
        }
        bool authorize_thread(ULL&mask) {
            if (mask&getThreadMask()) return(NO);
            else {
                mask|=getThreadMask();
                return(YES);
            }
        }
        void deauthorize_thread(ULL&mask) {
            mask&=~getThreadMask();
        }
        )
    }

<ClassObject>
    ULL __private_access_thread_mask_in___ClassName__=0 (justivar,privateivar)





ClassCount "-Object" "fn:object"
    LL count=nil,nextID=nil
    NSString name=nil (readonly,dealloc,ivar=name)
    +(ClassCount*)classCount {
        return([[ClassCount alloc] init]);
    }
    -(init[super init])initWithName:(NSString*)aname {
        name=aname;
        count=0;nextID=1;
    }
    NSString description={return([NSString stringWithFormat:@"%@x%qu",name,count]);}

type UnsafeClassCount "typedef@-1:__unsafe_unretained ClassCount*"
type QuickHashTableOfClassCounts "typedef:QuickHashTable<UnsafeClassCount>"
type ArrayOfClassCounts "typedef:Array<UnsafeClassCount>"
Globals
    -decl
        NOSWIFT(
        template class QuickHashTable<UnsafeClassCount>;
        extern QuickHashTableOfClassCounts *g_classCountht;
        extern ArrayOfClassCounts *g_classCountArray;
        )
        extern NSMutableArray *g_classCounts;
        extern ClassCount *g_totalObjectCount;
        extern ClassCount *g_classCountForClass(Class clas);

    -decl:impl
        NOSWIFT(
        QuickHashTableOfClassCounts *g_classCountht=nil;
        ArrayOfClassCounts *g_classCountArray=nil;
        )
        NSMutableArray *g_classCounts=nil;
        ClassCount *g_totalObjectCount=nil;
        ClassCount *g_classCountForClass(Class clas) {
            ULL hash=obfuscateHash((ULL)clas);
            ClassCount *ret=g_classCountht->find(hash);
            if (!ret) {
                ret=[[ClassCount alloc] initWithName:[NSString stringWithFormat:@"%s",class_getName(clas)]];
                (*g_classCountArray)+=ret;
                [g_classCounts addObject:ret];
                g_classCountht->add(hash,ret);
            }
            return(ret);
        }

Singletons<Ticker> "-Object" "fn:object"
    NSMutableArray typeCountHistory=[NSMutableArray array]
    QuickHashTableOfClassCounts *classCountht=nil (readonly)
    ArrayOfClassCounts *classCountArray=nil (readonly)
    ClassCount totalObjectCount=nil (publicreadonly,dealloc,ivar=totalObjectCount)

    -(void)dealloc {
        {
            DELETE(QuickHashTableOfClassCounts,g_classCountht);
            DELETE(ArrayOfClassCounts,g_classCountArray);
            g_classCounts=nil;
        }
    }

    -(init) {@-800
        g_totalObjectCount=totalObjectCount=[[ClassCount alloc] initWithName:@"All classes"];
        ContextIndex ci={0};
        g_classCounts=[NSMutableArray array];
        g_classCountht=classCountht=NEWCONSb(QuickHashTableOfClassCounts,(ci,nil,2048));
        g_classCountArray=classCountArray=NEWCONSb(ArrayOfClassCounts,());
        @0
        for (Int i=0;i<5;i++) [self.typeCountHistory addObject:[NSMutableDictionary dictionary]];
    }

    NSString description={@-999
        NSMutableString *ret=[NSMutableString stringWithFormat:@"\nx%qu Objects:\n",totalObjectCount.count];
        {
            UnsafeClassCount pcc;
            arrHeapSortb(UnsafeClassCount,g_classCountArray->a,obja.count>objb.count,0,g_classCountArray->upperBound(),pcc);
            IterateArray(UnsafeClassCount,cc,*g_classCountArray,
                NSString *name=cc.name;
                [ret appendFormat:@"%@    %@ x %qu << %u, %u, %u, %u, %u -- %d\n",
                    (int(cc.count)==
                    ((NSNumber*)[(NSDictionary*)[self.typeCountHistory objectAtIndex:1] objectForKey:name]).intValue?@"":@"**"),
                    name,cc.count,
                    ((NSNumber*)[(NSDictionary*)[self.typeCountHistory objectAtIndex:0] objectForKey:name]).intValue,
                    ((NSNumber*)[(NSDictionary*)[self.typeCountHistory objectAtIndex:1] objectForKey:name]).intValue,
                    ((NSNumber*)[(NSDictionary*)[self.typeCountHistory objectAtIndex:2] objectForKey:name]).intValue,
                    ((NSNumber*)[(NSDictionary*)[self.typeCountHistory objectAtIndex:3] objectForKey:name]).intValue,
                    ((NSNumber*)[(NSDictionary*)[self.typeCountHistory objectAtIndex:4] objectForKey:name]).intValue,
                    int(cc.count)-
                    ((NSNumber*)[(NSDictionary*)[self.typeCountHistory objectAtIndex:1] objectForKey:name]).intValue
                    ];
            );
        }
        @999 return(ret);
    }

    -(void)tick {
        [Log sendToLog:@"Singletons" format:@"Singletons at %@\n%@\n\n",((NSDate*)[NSDate date]).description,self.description];
        if (!self.online) prnt("%s\n",self.description.UTF8String);
        NSMutableDictionary *d=(NSMutableDictionary*)[self.typeCountHistory objectAtIndex:4];
        [self.typeCountHistory removeLastObject];
        [d removeAllObjects];

        IterateArray(UnsafeClassCount,cc,*g_classCountArray,
            NSString *key=cc.name;
            [d setObject:@(cc.count) forKey:key];
        );
        [self.typeCountHistory insertObject:d atIndex:0];
    }
    
"<execinfo.h>"

Globals
    -interfaces
        //extern void retainFn(NSObject *me,Int &rc,Int &arc);
        //extern void releaseFn(NSObject *me,Int &rc,Int &arc,bool debugAutorelease);
        //extern void autoreleaseFn(NSObject *me,Int &rc,Int &arc,bool debugAutorelease);
        NOSWIFT(
        extern void objInitFn(NSObject *me,LL &mei,LL &meci);
        extern void deallocFn(NSObject *me,LL &mei,LL &meci);
        )
        extern NSString *g_objectName(id object);
        extern const char *g_cobjectName(id object);
    
    -interfaces:impl
        //void retainFn(NSObject *me,Int &rc,Int &arc) {
        //    rc++;
        //    objectRetained(me);
        //}
        
        //void releaseFn(NSObject *me,Int &rc,Int &arc,bool debugAutorelease) {
        //    rc--;
        //    bool isAutorelease=NO;
        //    if (debugAutorelease) {
        //        void* callstack[8];
        //        int i, frames = backtrace(callstack, 6);
        //        char** strs = backtrace_symbols(callstack, frames);
        //        //for (i = 0; i < frames; ++i) {
        //        //    printf("%s\n", strs[i]);
        //        //}
        //        for (i = 2; i < frames; ++i) {
        //            if (strstr(strs[i]," release]")) break;
        //            else if (strstr(strs[i],"AutoreleasePoolP")) {isAutorelease=YES;arc--;break;}
        //        }
        //        //prnt("%s\n",isAutorelease?" -- autorelease\n":" -- standard release\n");
        //        free(strs);
        //        if (isAutorelease) {
        //            objectAutoreleaseCollected(me);
        //            arc--;
        //        }
        //        else objectReleased(me);
        //    }
        //    else objectReleased(me);
        // }
        
        //void autoreleaseFn(NSObject *me,Int &rc,Int &arc,bool debugAutorelease) {
        //    if (debugAutorelease) {
        //        arc++;
        //        objectAutoreleasePending(me);
        //    }
        //}

        NOSWIFT(
        void objInitFn(NSObject *me,LL &mei,LL &meci) {
            ClassCount *c=g_classCountForClass([me class]);
            c.count++;
            meci=c.nextID++;
            mei=g_singletons.totalObjectCount.nextID++;
            g_singletons.totalObjectCount.count++;
            objectAllocated(me);
        }
     
        void deallocFn(NSObject *me,LL &mei,LL &meci) {
            if (mei==0) {
                ERR("!!!! error with object %p of type %s, the object was never inited",me,class_getName([me class]));
                return;
            }
            if (mei==-1) {
                ERR("!!!! error with object %p of type %s, the object seems to be being dealloced again",me,class_getName([me class]));
                return;
            }

            ClassCount *c=g_classCountForClass([me class]);
            if (c.count<=0) {
                ERR("!!!! error with counts of type %s, the object %p is being deallocated but the count of %s's is negative or zero",class_getName([me class]),me,class_getName([me class]));
                return;
            }
            c.count--;
     
            objectDeallocated(me);
            mei=meci=-1;
        }
        )
        NSString *g_objectName(id object) {
            if ([(NSObject*)object respondsToSelector:@selector(objectName)]) return([(NSObject<Object>*)object objectName]);
            else return([NSString stringWithFormat:@"%s:%p",class_getName([(NSObject*)object class]),object]);
        }
        const char *g_cobjectName(id object) {
            return([g_objectName(object) cStringUsingEncoding:NSASCIIStringEncoding]);
        }

<Object>
    LL objectIDInClass=nil,objectIDInTotal=nil (readonly)

    bool isZombie=nil (readonly)

    bool debugAutorelease=nil

    LL __owner_context=nil (ivar=__owner_context)

    -(init) {@-996 debugAutorelease=YES;}
    -(init) {@-995 objInitFn(self,objectIDInTotal,objectIDInClass);
    }
    -(void)dealloc {@998 deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie=YES;
#if defined(LONGLIVEZOMBIES) || defined(LONGLIVEZOMBIES___WI_CLASS__)
        if (YES) return;
#endif
    }

    NSString description={@-999
        NSMutableString *ret=self.objectName;
        @999 return(ret);
    }
    NSMutableString objectName={@-999 
        NSMutableString *ret=nil;
        @-100 ret=[NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];
        @999 return(ret);
    }
    constchar *cdescription={return([self.description cStringUsingEncoding:NSASCIIStringEncoding]);}
    constchar *cobjectName={return([self.objectName cStringUsingEncoding:NSASCIIStringEncoding]);}









    
Singletons

    Trace trace={return(!trace?trace=[[Trace alloc] init]:trace);}=nil(publicreadonly,dealloc,ivar=trace)
    
"<pthread.h>"
Globals
    -interfaces
        extern ULL g_sequence;
        extern Trace *g_trace;
        void addTraceString(NSString *string);
        NSString *__getCurrentTraceString();

        #define ADDTRACE(__trcfnnm) TraceFunctionTracker __functionTracker((((__bridge const void*)self)!=(__bridge const void*)g_trace)&&(((__bridge const void*)self)!=(__bridge const void*)[g_trace class]),__trcfnnm);

        void addTrace(NSString *trace,Int depth);
        void addTraceCString(const char *trace,Int depth);
        void finishDepth(Int depth);
        void ADDOWNER(id object,id owner);
        void REMOVEOWNER(id object,id owner);
        void objectRetained(id object);
        void objectReleased(id object);
        void objectAutoreleasePending(id object);
        void objectAutoreleaseCollected(id object);
        void objectAllocated(id object);
        void objectDeallocated(id object);

        NSString *threadNameJSON();
        
        NOSWIFT(
        #define CurrentThreadHash ((ULL)(__bridge const void*)(id)NSThread.currentThread)

        extern QuickHashOfInts *g_noTraceHT;
        class TraceFunctionTracker {
            public:
                LL depth;
                static pthread_key_t key;
                TraceFunctionTracker(bool en,const char *fnName) {
                    if (!en) depth=-1;
                    else {
                        if (!key) pthread_key_create(&key,nil);
                        depth=((LL)pthread_getspecific(key))+1;
                        if (depth<0) depth=0;
                        pthread_setspecific(key,(const void*)depth);
                        addTraceCString(fnName,(int)depth);
                    }
                }
                ~TraceFunctionTracker() {
                    if (depth>=0) {
                        finishDepth((int)depth);
                        pthread_setspecific(key,(const void*)(LL)(depth-1));
                    }
                }
        };
        )
        extern Int g_numNamedThreads;

    -interfaces:impl
        ULL g_sequence=0;
        Trace *g_trace=nil;
        pthread_key_t TraceFunctionTracker::key=0;
        Int g_numNamedThreads=0;

        QuickHashOfInts *g_noTraceHT=NULL;
        void preventTrace() {
            if (!g_noTraceHT) g_noTraceHT=NEWCONSb(QuickHashOfInts,((ContextIndex){0},1,2048));
            g_noTraceHT->changeOrAdd(CurrentThreadHash,0);
        }
        void allowTrace() {
            if (g_noTraceHT) g_noTraceHT->changeOrAdd(CurrentThreadHash,1);
        }
        
        NSString *threadNameJSON() {
            NSString *nm=(NSString*)[[NSThread currentThread].threadDictionary objectForKey:@"jsonname"];
            if (!nm) {
                [[NSThread currentThread].threadDictionary setObject:nm=JSONStringForString([NSString stringWithFormat:@"%d%@",(int)++g_numNamedThreads,[NSThread currentThread].name],@"jsonname") forKey:@"jsonname"];
            }
            return(nm);
        }

        NSMutableArray *allTraceStringArrays=nil;
        volatile Unsigned32 threadTraceStringFragmentPartition=0;
        volatile Int32 threadTraceWritingStringFragment=0;
        volatile Int64 threadTraceStringPosition=0;
        void addTraceString(NSString *string) {
            NSArray *a=(NSArray*)[NSThread currentThread].threadDictionary[@"threadTraceStringFragments"];
            if (!a) {
                [NSThread currentThread].threadDictionary[@"threadTraceStringFragments"]=a=
                        @[NSMutableString.string,NSMutableArray.array,NSMutableString.string,NSMutableArray.array];
                if (!allTraceStringArrays) allTraceStringArrays=NSMutableArray.array;
                [allTraceStringArrays addObject:a];
            }
            Unsigned32 pi=OSAtomicIncrement32(&threadTraceWritingStringFragment)>>31;
            Unsigned64 len=string.length,offset=OSAtomicAdd64(len,&threadTraceStringPosition);
            [((NSMutableArray*)a[(pi<<1)+1]) addObject:[NSValue valueWithRange:NSMakeRange(offset-len,len)]];
            [((NSMutableString*)a[pi<<1]) appendString:string];
            OSAtomicDecrement32(&threadTraceWritingStringFragment);
        }

        NSString *__getCurrentTraceString() {
            Unsigned32 pi;
            if ((pi=OSAtomicOr32(1<<31,&threadTraceStringFragmentPartition))&~(1<<31)) {
                // slight glimmer of a possibility of non-synchronization
                OSAtomicAnd32(~(1<<31),&threadTraceStringFragmentPartition);
                return(@"");
            }
            pi=(pi>>31)^1;
            NSMutableString *ret=NSMutableString.string;
            NSArray *as=allTraceStringArrays.copy;
            Array<Int> indexes,counts,positions;
            Array<NSRange> ranges;
            positions.setUpperBound(as.count-1);
            ranges.setUpperBound(as.count-1);
            indexes.setUpperBound(as.count-1);
            counts.setUpperBound(as.count-1);
            IterateArray(Int,count,counts,  count=((NSArray*)as[countIndex][(pi<<1)+1]).count;);
            IterateArray(NSRange,range,ranges,
                range=(counts.a[rangeIndex]?((NSValue*)((NSArray*)as[rangeIndex][(pi<<1)+1]).firstObject).rangeValue:NSMakeRange(NSNotFound,0));
            );

            while (true) {
                Int mini=0;
                NSRange min=NSMakeRange(NSNotFound,0);
                IterateArray(NSRange,range,ranges,   if (range.location<min.location) {mini=rangeIndex;min=range;});
                if (min.location==NSNotFound) break;

                NSString *s=as[mini][pi<<1];
                [ret appendString:[s substringWithRange:NSMakeRange(positions.a[mini],min.length)]];
                positions.a[mini]+=min.length;

                if ((++indexes.a[mini])==counts.a[mini]) {
                    ranges.a[mini].location=NSNotFound;
                }
                else {
                    ranges.a[mini]=((NSValue*)((NSArray*)as[mini][(pi<<1)+1])[indexes.a[mini]]).rangeValue;
                }
            }

            for (NSArray *a in as) {
                [(NSMutableString*)a[pi<<1] setString:@""];
                [(NSMutableArray*)a[(pi<<1)+1] removeAllObjects];
            }


            return(ret);
        }


        void addTrace(NSString *trace,Int depth) {
            if ((!g_noTraceHT)||(*g_noTraceHT)[CurrentThreadHash]) {
                addTraceString([NSString stringWithFormat:@"[%d,%qu,%f,\"%@\",\"%@\"],\n",(int)depth,g_sequence++,CACurrentMediaTime(),
                    threadNameJSON(),
                    JSONStringForString(trace,@"addTrace")
                ]);
            }
        }
        
        void addTraceCString(const char *trace,Int depth) {
            if ((!g_noTraceHT)||(*g_noTraceHT)[CurrentThreadHash]) {
                addTraceString([NSString stringWithFormat:@"[%d,%qu,%f,\"%@\",\"%S\"],\n",(int)depth,g_sequence++,CACurrentMediaTime(),
                    threadNameJSON(),
                    JSONunicharsStringForCString(trace,(Int)strlen(trace),nil,nil,@"addTrace")
                ]);
            }
        }
        
        void finishDepth(Int depth) {
            addTraceString([NSString stringWithFormat:@"[%d,%qu,%f,\"%@\"],\n",(int)depth,g_sequence++,CACurrentMediaTime(),
                threadNameJSON()
            ]);
        }

        void ADDOWNER(id object,id owner) {
            addTraceString([NSString stringWithFormat:@"[-1,%qu,%f,%qx,%qx,\"%s\"],\n",g_sequence++,CACurrentMediaTime(),
                (ULL)owner,(ULL)object,class_getName([object class])]);
        }
        void REMOVEOWNER(id object,id owner) {
            addTraceString([NSString stringWithFormat:@"[-2,%qu,%f,%qx,%qx],\n",g_sequence++,CACurrentMediaTime(),
                (ULL)owner,(ULL)object]);
        }

        void objectRetained(id object) {
            addTraceString([NSString stringWithFormat:@"[-3,%qu,%f,%qx,\"%s\"],\n",g_sequence++,CACurrentMediaTime(),
                (ULL)object,class_getName([object class])]);
        }
        void objectReleased(id object) {
            addTraceString([NSString stringWithFormat:@"[-4,%qu,%f,%qx],\n",g_sequence++,CACurrentMediaTime(),
                (ULL)object]);
        }
        void objectAutoreleasePending(id object) {
            addTraceString([NSString stringWithFormat:@"[-5,%qu,%f,%qx],\n",g_sequence++,CACurrentMediaTime(),
                (ULL)object]);
        }
        void objectAutoreleaseCollected(id object) {
            addTraceString([NSString stringWithFormat:@"[-6,%qu,%f,%qx],\n",g_sequence++,CACurrentMediaTime(),
                (ULL)object]);
        }
        void objectAllocated(id object) {
            addTraceString([NSString stringWithFormat:@"[-7,%qu,%f,%qx,\"%s\"],\n",g_sequence++,CACurrentMediaTime(),
                (ULL)object,class_getName([object class])]);
        }
        void objectDeallocated(id object) {
            addTraceString([NSString stringWithFormat:@"[-4,%qu,%f,%qx],\n",g_sequence++,CACurrentMediaTime(),
                (ULL)object]);
        }
 

Trace<Ticker,BaseObject> "notrace"
    +(NSString*)callStackStringFromDepth:(Int)fromDepth toDepth:(Int)toDepth {
        NSMutableString *ret=[NSMutableString string];
        NSArray *__a=[NSThread callStackSymbols];
        //NSLog(__a.description);
        for (Int d=1,dd=0;(d<__a.count)&&(dd<=toDepth);d++) {
            NSString *s=[__a objectAtIndex:d];
            Unsigned st=[s rangeOfString:@"["].location;
            Unsigned en=[s rangeOfString:@"]" options:NSBackwardsSearch].location;
            if ((st!=NSNotFound)&&(en!=NSNotFound)&&(en>st)) {
                s=[s substringWithRange:NSMakeRange(st-1,en+1-(st-1))];
                if ([s isEqualToString:@"-[EndpointS didAddObject:]"]) [ret appendFormat:@" ES+ "];
                else if ([s isEqualToString:@"-[EndpointS addObject:]"]||[s isEqualToString:@"-[EndpointS _addObject:]"]) {}
                else if ([s isEqualToString:@"-[MutableSet didAddObject:]"]) [ret appendFormat:@" MS+ "];
                else if ([s isEqualToString:@"-[MutableSet addObject:]"]||[s isEqualToString:@"-[MutableSet _addObject:]"]) {}
                else if ([s isEqualToString:@"-[EndpointS willRemoveObject:]"]) [ret appendFormat:@" ES- "];
                else if ([s isEqualToString:@"-[EndpointS removeObject:]"]||[s isEqualToString:@"-[EndpointS _removeObject:]"]) {}
                else if ([s isEqualToString:@"-[MutableSet willRemoveObject:]"]) [ret appendFormat:@" MS- "];
                else if ([s isEqualToString:@"-[MutableSet removeObject:]"]||[s isEqualToString:@"-[MutableSet _removeObject:]"]) {}
                else if ([s isEqualToString:@"-[EndpointA didInsertObject:withIndex:]"]) [ret appendFormat:@" EA+ "];
                else if ([s isEqualToString:@"-[EndpointA insertObject:atIndex:]"]||[s isEqualToString:@"-[EndpointA _insertObject:withIndex:]"]) {}
                else if ([s isEqualToString:@"-[MutableArray didInsertObject:withIndex:]"]) [ret appendFormat:@" MA+ "];
                else if ([s isEqualToString:@"-[MutableArray insertObject:withIndex:]"]||[s isEqualToString:@"-[MutableArray _insertObject:withIndex:]"]) {}
                else if ([s isEqualToString:@"-[EndpointA willRemoveObject:atIndex:]"]) [ret appendFormat:@" EA- "];
                else if ([s isEqualToString:@"-[EndpointA removeObject:atIndex:]"]||[s isEqualToString:@"-[EndpointA _removeObject:atIndex:]"]) {}
                else if ([s isEqualToString:@"-[MutableArray willRemoveObject:atIndex:]"]) [ret appendFormat:@" MA- "];
                else if ([s isEqualToString:@"-[MutableArray removeObject:atIndex:]"]||[s isEqualToString:@"-[MutableArray _removeObject:atIndex:]"]) {}
                else {
                    if (dd>=fromDepth) {
                        [ret appendFormat:@" -- %@",s];
                    }
                    dd++;
                }
            }
        }
        return(ret);
    }
    

    //NSMutableData tmpJSONData=[[NSMutableData alloc] init] (readonly,dealloc,ivar=tmpJSONData)
    
    NSMutableString *nwTraces=[[NSMutableString alloc] init] (readonly,dealloc,ivar=newTraces)
    NSMutableString *nwTraces2=[[NSMutableString alloc] init] (readonly,dealloc,ivar=newTraces2)

    -(void)start {__getCurrentTraceString();g_trace=self;[self startWithInterval:0.5];}
    -(void)stop {@100 g_trace=nil;}
    
    bool savingTrace={return(v_tim!=nil);}


    bool not_first=nil

    -(void)tick {
        g_trace=self;
        
        NSString *s=__getCurrentTraceString();
        
        if (s.length) {
            NSURL *url=[NSURL URLWithString:[g_singletons.homeURLPrefix stringByAppendingFormat:@"savetrace.php?fn=%@&fst=%d",g_singletons.styleName,not_first?0:1]];
            [[s dataUsingEncoding:NSUTF8StringEncoding] sendAsBodyOfPOSTRequestWithURL:url returningResponse:nil error:nil];
            not_first=1;
        }
    }
    
    
    
    
    
    










    
Singletons
    ObjectGraph objectGraph={return(!objectGraph?objectGraph=[[ObjectGraph alloc] init]:objectGraph);}=nil(publicreadonly,dealloc,ivar=objectGraph)
    
"<pthread.h>"
Globals
    -interfaces
        extern ObjectGraph *g_objectGraph;
        #define OBJOWN(__owner,__obj,__c) [g_objectGraph object:__owner ownsObject:__obj count:__c]

    -interfaces:impl
        ObjectGraph *g_objectGraph=nil;

ObjectGraph<Ticker,BaseObject>
    NSMutableString *nwEdits=[[NSMutableString alloc] init] (readonly,dealloc,ivar=newEdits)
    NSMutableString *nwEdits2=[[NSMutableString alloc] init] (readonly,dealloc,ivar=newEdits2)

    -(void)start {g_objectGraph=self;[self startWithInterval:0.5];}
    -(void)stop {@100 g_objectGraph=nil;}
    
    bool savingGraph={return(v_tim!=nil);}

    -(void)object:(LL)owner ownsObject:(LL)object count:(Int)count {
        [newEdits appendFormat:@"[%qu,%f,%qu,%qu,%d],\n",g_sequence++,CACurrentMediaTime(),owner,object,(int)count];
    }

    bool not_first=nil

    -(void)tick {
        g_objectGraph=self;
        
        [newEdits2 setString:@""];
        NSMutableString *tmp=newEdits;newEdits=newEdits2;newEdits2=tmp;
        
        if (newEdits2.length) {
            NSURL *url=[NSURL URLWithString:[g_singletons.homeURLPrefix stringByAppendingFormat:@"saveobjectgraph.php?fn=%@&fst=%d",g_singletons.styleName,not_first?0:1]];
            [[newEdits2 dataUsingEncoding:NSUTF8StringEncoding] sendAsBodyOfPOSTRequestWithURL:url returningResponse:nil error:nil];
            not_first=1;
        }

        [newEdits2 setString:newEdits];
        newEdits2=newEdits;newEdits=tmp;
    }
    







    

ObjectPointer<ObjectEquateAndCopy> "-Object" "fn:object"
    LL objectIDInTotal=nil (readonly)
    -(init[super init])initWithObjectID:(LL)aobjectIDInTotal {
        objectIDInTotal=aobjectIDInTotal;
    }
    
<ObjectEquate>
    LL objectIDInTotal (readonly)
    -(BOOL)isEqual:(id)obj {@-999 
        bool ret=(obj==self)||
                    ([obj respondsToSelector:@selector(objectIDInTotal)]&&
                    (((NSObject<ObjectEquate>*)obj).objectIDInTotal==objectIDInTotal));
        @999 return(ret);
    }
    -(Unsigned)hash {return((Unsigned)obfuscateULL(objectIDInTotal));}

<ObjectEquateAndCopy:NSCopying,ObjectEquate>
    -(id)copyWithZone:(NSZone*)zone {
        return([[ObjectPointer allocWithZone:zone] initWithObjectID:objectIDInTotal]);
    }








