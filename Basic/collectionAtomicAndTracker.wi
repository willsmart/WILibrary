









AtomiclyMutableSet:NSMutableSet<ModelSet,Commitable,ObjectEquate>
    long version=1

    NSMutableSet<MutableSet> trackerSet=
        {return(trackerSet);}
        -v{
            [trackerSet release];
            trackerSet=[v retain];
            version=v.version;
        } (ivar=trackerSet,dealloc)

    -(void)setAtomicSet:(NSSet*)v {
        version=0;
        [self makeNonModel];
        [__set release];
        __set=[[NSSet alloc] initWithSet:v];
        [self makeModel];
    }

    -(void)commitSet {
        if (version!=trackerSet.version) {
            [self makeNonModel];
            [__set release];
            __set=[[NSSet alloc] initWithSet:trackerSet.__set];
            [self makeModel];
            version=trackerSet.version;
        }
    }

    NSSet copyAndClear={
        NSSet *ret=__set;
        [self makeNonModel];
        __set=[[NSSet alloc] init];
        return(ret);
    }


    -(void)addObject:(id)object {
        [trackerSet addObject:object];
        if (trackerSet.version!=version) [self markDirty];
    }
    -(void)filterUsingPredicate:(NSPredicate *)predicate {
        [trackerSet filterUsingPredicate:predicate];
        if (trackerSet.version!=version) [self markDirty];
    }
    -(void)removeObject:(id)object {
        [trackerSet removeObject:object];
        if (trackerSet.version!=version) [self markDirty];
    }
    -(void)removeAllObjects {
        [trackerSet removeAllObjects];
        if (trackerSet.version!=version) [self markDirty];
    }
    -(void)addObjectsFromArray:(NSArray*)array {
        [trackerSet addObjectsFromArray:array];
        if (trackerSet.version!=version) [self markDirty];
    }
    -(void)unionSet:(NSSet*)set {
        [trackerSet unionSet:set];
        if (trackerSet.version!=version) [self markDirty];
    }
    -(void)minusSet:(NSSet*)set {
        [trackerSet minusSet:set];
        if (trackerSet.version!=version) [self markDirty];
    }
    -(void)intersectSet:(NSSet*)set {
        [trackerSet intersectSet:set];
        if (trackerSet.version!=version) [self markDirty];
    }
    -(void)setSet:(NSSet*)set {
        [trackerSet setSet:set];
        if (trackerSet.version!=version) [self markDirty];
    }


    




























AtomiclyMutableDictionary:NSMutableDictionary<ModelDictionary,Commitable,ObjectEquate>
    long version=1

    NSMutableDictionary<MinimalMutableDictionary> trackerDictionary=
        {return(trackerDictionary);}
        -v{
            [trackerDictionary release];
            trackerDictionary=[v retain];
            version=v.version;
        } (ivar=trackerDictionary,dealloc)

    -(void)setAtomicDictionary:(NSDictionary*)v {
        version=0;
        [self makeNonModel];
        [__dictionary release];
        __dictionary=[[NSDictionary alloc] initWithDictionary:v];
        [self makeModel];
    }

    -(void)commitDictionary {
        if (version!=trackerDictionary.version) {
            [self makeNonModel];
            [__dictionary release];
            __dictionary=[[NSDictionary alloc] initWithDictionary:trackerDictionary.__dictionary];
            [self makeModel];
            version=trackerDictionary.version;
        }
    }

    NSDictionary copyAndClear={
        NSDictionary *ret=__dictionary;
        [self makeNonModel];
        __dictionary=[[NSDictionary alloc] init];
        return(ret);
    }
 

    -(void)setObject:(id)object forKey:(id<NSCopying>)key {
        [trackerDictionary setObject:object forKey:key];
        if (trackerDictionary.version!=version) [self markDirty];
    }
    -(void)removeObjectForKey:(id<NSCopying>)key {
        if ([self objectForKey:key]) {
            [trackerDictionary removeObjectForKey:key];
            if (trackerDictionary.version!=version) [self markDirty];
        }
    }
    -(void)setValue:(id)object forKey:(NSString*)key {
        [trackerDictionary setValue:object forKey:key];
        if (trackerDictionary.version!=version) [self markDirty];
    }
    -(void)addEntriesFromDictionary:(NSDictionary*)dictionary {
        [trackerDictionary addEntriesFromDictionary:dictionary];
        if (trackerDictionary.version!=version) [self markDirty];
    }
    -(void)setDictionary:(NSDictionary*)dictionary {
        [trackerDictionary setDictionary:dictionary];
        if (trackerDictionary.version!=version) [self markDirty];
    }
    -(void)removeAllObjects {
        [trackerDictionary removeAllObjects];
        if (trackerDictionary.version!=version) [self markDirty];
    }
    -(void)removeObjectsForKeys:(NSArray*)keys {
        [trackerDictionary removeObjectsForKeys:keys];
        if (trackerDictionary.version!=version) [self markDirty];
    }
    
    
    
    
    
    























AtomiclyMutableArray:NSMutableArray<ModelArray,Commitable,ObjectEquate>
    long version=0

    NSMutableArray<MinimalMutableArray> trackerArray=
        {return(trackerArray);}
        -v{
            [trackerArray release];
            trackerArray=[v retain];
            version=v.version;
        } (ivar=trackerArray,dealloc)

    -(void)setAtomicArray:(NSArray*)v {
        version=0;
        [self makeNonModel];
        [__array release];
        __array=[[NSArray alloc] initWithArray:v];
        [self makeModel];
    }

    -(void)commitArray {
        if (version!=trackerArray.version) {
            [self makeNonModel];
            [__array release];
            __array=[[NSArray alloc] initWithArray:trackerArray.__array];
            [self makeModel];
            version=trackerArray.version;
        }
    }


    NSArray copyAndClear={
        NSArray *ret=__array;
        [self makeNonModel];
        __array=[[NSArray alloc] init];
        return(ret);
    }


    -(NSUInteger)bestTrackerInsertIndexForObject:(id)object index:(NSUInteger)index {
        if ([trackerArray containsObject:object]) return(NSNotFound);
        NSInteger i;
        NSUInteger ti=NSNotFound;
        for (i=index-1;i>=0;i--) {
            id was=[__array objectAtIndex:i];
            ti=[trackerArray indexOfObject:was];
            if (ti!=NSNotFound) {ti++;break;}
        }
        if (i<0) for (i=index;i<__array.count;i++) {
            id was=[__array objectAtIndex:i];
            ti=[trackerArray indexOfObject:was];
            if (ti!=NSNotFound) break;
        }
        if (ti==NSNotFound) {
            ti=(index>trackerArray.count?trackerArray.count:index);
        }
        return(ti);
    }
    
    
    //Adding Objects
    -(void)addObject:(id)object {
        if (![trackerArray containsObject:object]) {
            [trackerArray addObject:object];
            if (trackerArray.version!=version) [self markDirty];
        }
    }
    -(void)insertObject:(id)object atIndex:(NSUInteger)index {
        NSUInteger ti=[self bestTrackerInsertIndexForObject:object index:index];
        if (ti!=NSNotFound) {
            [trackerArray insertObject:object atIndex:ti];
            if (trackerArray.version!=version) [self markDirty];
        }
    }
    -(void)removeObjectAtIndex:(NSUInteger)index {
        [self removeObject:[__array objectAtIndex:index]];
    }
    -(void)removeLastObject {
        if (self.count) [self removeObjectAtIndex:self.count-1];
    }
    -(void)replaceObjectAtIndex:(NSUInteger)index withObject:(id)object {
        if (![trackerArray containsObject:object]) {
            id object2=[__array objectAtIndex:index];
            if ([object2 isEqual:object]) return;
            NSUInteger ti=[trackerArray indexOfObject:object2];
            if (ti!=NSNotFound) {
                [trackerArray replaceObjectAtIndex:ti withObject:object];
                if (trackerArray.version!=version) [self markDirty];
            }
        }
    }

    -(void)addObjectsFromArray:(NSArray*)array {
        for (id object in array) [self addObject:object];
    }

    -(void)insertObjects:(NSArray*)objects atIndexes:(NSIndexSet*)indexes {
        NSUInteger index=[indexes firstIndex];
        for (id object in objects) {
            [self insertObject:object atIndex:index];
            index=[indexes indexGreaterThanIndex:index];
        }
    }
    
    
    //Removing Objects
    -(void)removeAllObjects {
        for (id object in __array) [self removeObject:object];
    }
    -(void)removeObject:(id)object {
        NSUInteger ti=[trackerArray indexOfObject:object];
        if (ti!=NSNotFound) {
            [trackerArray removeObjectAtIndex:ti];
            if (trackerArray.version!=version) [self markDirty];
        }
    }
    -(void)removeObject:(id)object inRange:(NSRange)r {
        for (NSUInteger index=[self indexOfObject:object inRange:r];index!=NSNotFound;index=[self indexOfObject:object inRange:NSMakeRange(index+1,(r.location+r.length)-(index+1))]) {
            [self removeObjectAtIndex:index];
        }
    }

    -(void)removeObjectsAtIndexes:(NSIndexSet*)indexes {
        for (NSUInteger index=[indexes firstIndex];index!=NSNotFound;index=[indexes indexGreaterThanIndex:index]) {
            [self removeObjectAtIndex:index];
        }
    }
    -(void)removeObjectIdenticalTo:(id)object {
        for (NSUInteger index=[self indexOfObjectIdenticalTo:object];index!=NSNotFound;index=[self indexOfObjectIdenticalTo:object inRange:NSMakeRange(index+1,self.count-(index+1))]) {
            [self removeObjectAtIndex:index];
        }
    }
    -(void)removeObjectIdenticalTo:(id)object inRange:(NSRange)r {
        for (NSUInteger index=[self indexOfObjectIdenticalTo:object inRange:r];index!=NSNotFound;index=[self indexOfObjectIdenticalTo:object inRange:NSMakeRange(index+1,(r.location+r.length)-(index+1))]) {
            [self removeObjectAtIndex:index];
        }
    }
    -(void)removeObjectsInArray:(NSArray*)array {
        for (id object in array) [self removeObject:object];
    }
    -(void)removeObjectsInRange:(NSRange)r {
        for (NSUInteger i=r.location;i<r.location+r.length;i++) {
            [self removeObjectAtIndex:i];
        }
    }
    
    
    //Replacing Objects
    -(void)replaceObjectsAtIndexes:(NSIndexSet*)indexes withObjects:(NSArray*)array {
        NSUInteger index=[indexes firstIndex];
        for (id object in array) {
            [self replaceObjectAtIndex:index withObject:object];
            index=[indexes indexGreaterThanIndex:index];
        }
    }
    -(void)replaceObjectsInRange:(NSRange)r withObjectsFromArray:(NSArray*)array range:(NSRange)arrayRange {
        for (int i=0;i<MIN(r.length,arrayRange.length);i++) {
            [self replaceObjectAtIndex:i+r.location withObject:[array objectAtIndex:i+arrayRange.location]];
        }
        for (NSUInteger i=arrayRange.length;i<r.length;i++) [self removeObjectAtIndex:i+r.location];
        for (NSUInteger i=arrayRange.length-1;i>=r.length;i--) [self insertObject:[array objectAtIndex:i] atIndex:r.location+r.length+1];
    }
    -(void)replaceObjectsInRange:(NSRange)r withObjectsFromArray:(NSArray*)array {
        [self replaceObjectsInRange:r withObjectsFromArray:array range:NSMakeRange(0,array.count)];
    }
    -(void)setArray:(NSArray*)array {
        [trackerArray setArray:array];
        if (trackerArray.version!=version) [self markDirty];
    }
    
    
    //Filtering Content
    -(void)filterUsingPredicate:(NSPredicate *)predicate {
        NSMutableIndexSet *toRemove=nil;
        NSUInteger index=0;
        for (id object in __array) {
            if (![predicate evaluateWithObject:object]) {
                if (!toRemove) toRemove=[[NSMutableIndexSet alloc] init];
                [toRemove addIndex:index];
            }
            index++;
        }
        if (toRemove) {
            [self removeObjectsAtIndexes:toRemove];
            [toRemove release];
        }
    }
    
    
    //Rearranging Content
    -(void)exchangeObjectAtIndex:(NSUInteger)fromi withObjectAtIndex:(NSUInteger)toi {
        if (fromi!=toi) {
            NSUInteger fromai=[trackerArray indexOfObject:[__array objectAtIndex:fromi]];
            NSUInteger toai=[trackerArray indexOfObject:[__array objectAtIndex:toi]];
            if ((fromai!=NSNotFound)&&(toai!=NSNotFound)) {
                [trackerArray exchangeObjectAtIndex:fromai withObjectAtIndex:toai];
                if (trackerArray.version!=version) [self markDirty];
            }
        }
    }
    -(void)sortUsingDescriptors:(NSArray*)sortDescriptors {
        [trackerArray sortUsingDescriptors:sortDescriptors];
        if (trackerArray.version!=version) [self markDirty];
    }
    -(void)sortUsingComparator:(NSComparator)cmptr {
        [trackerArray sortUsingComparator:cmptr];
        if (trackerArray.version!=version) [self markDirty];
    }
    -(void)sortWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr {
        [trackerArray sortWithOptions:opts usingComparator:cmptr];
        if (trackerArray.version!=version) [self markDirty];
    }
    -(void)sortUsingFunction:(NSInteger (*)(id, id, void *))compare context:(void *)context {
        [trackerArray sortUsingFunction:compare context:context];
        if (trackerArray.version!=version) [self markDirty];
    }
    -(void)sortUsingSelector:(SEL)selector {
        [trackerArray sortUsingSelector:selector];
        if (trackerArray.version!=version) [self markDirty];
    }










