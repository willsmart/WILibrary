"../UI/StyleTicker.wi"

AppDelegate
    -(BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
        NSSetUncaughtExceptionHandler(&uncaughtExceptionHandler);

    -impl
        void uncaughtExceptionHandler(NSException *exception) {
            NSLog(@"\n\n\nStack:(Here)\n%@\n\nStack:(Exception)\n%@\n\nException: %@\n",NSThread.callStackSymbols.description,exception.callStackSymbols.description,exception.reason);
            BPNOW;
        }
    -iface
        void uncaughtExceptionHandler(NSException *exception);



UIImage
    bool writeImageToFileWithPath:(NSString*)path {
        NSString *pathLowered=path.lowercaseString;
        if ([pathLowered hasSuffix:@".jpeg"]||[pathLowered hasSuffix:@".jpg"]) {
            return([UIImageJPEGRepresentation(self, 1.0) writeToFile:path atomically:YES]);
        }
        else if ([pathLowered hasSuffix:@".png"]) {
            return([UIImagePNGRepresentation(self) writeToFile:path atomically:YES]);
        }
        else return(NO);
    }


ImageFromCGImage:UIImage
    CGImageRef sourceImage=nil
    __Class__* +imageWithCGImage:(CGImageRef)imageRef scale:(CGFloat)scale orientation:(UIImageOrientation)orientation {
        return([[__Class__ alloc] initWithCGImage:imageRef scale:scale orientation:orientation]);
    }
    Self initWithCGImage:(CGImageRef)imageRef scale:(CGFloat)scale orientation:(UIImageOrientation)orientation {
        sourceImage=CGImageRetain(imageRef);
    }
    void dealloc {
        if (sourceImage) CGImageRelease(sourceImage);
    }


Globals
    -interfaces
        #undef UIONLY
        #define UIONLY(...) __VA_ARGS__
        #undef NOTUI
        #define NOTUI(...)

Singletons
    FontList fontList={return(!fontList?fontList=[[FontList alloc] init]:fontList);}=nil (ivar=fontList,publicreadonly)

FontList <BaseObject>
    FontList* +getDefault {return(g_singletons.fontList);}

    readonly: NSArray fontNames=nil

    Self start {
        {
            MutableArray *a=[MutableArray array];
            NSArray *familyNames=[UIFont familyNames];
            for (NSString *familyName in familyNames) {
                NSArray *names=[UIFont fontNamesForFamilyName:familyName];
                for (NSString *name in names) {
                    if (![a containsObject:name]) {
                        [a addObject:name];
                    }
                }
            }
            fontNames=[a sortedArrayUsingComparator:^NSComparisonResult(id obj1, id obj2) {
                    NSString *s1=(NSString*)obj1;
                    NSString *s2=(NSString*)obj2;
                  return(s1.length<s2.length?NSOrderedAscending:
                    (s1.length>s2.length?NSOrderedDescending:
                        [s1 compare:s2]));
              }];
        }
    }
    NSString* fontNameMatchingPattern:(NSString*)pattern {
        return([self fontNameMatchingPattern:pattern orDefault:@"Helvetica"]);
    }
    NSString* fontNameMatchingPattern:(NSString*)pattern orDefault:(NSString*)def {
        for (NSString *name in fontNames) {
            if ([self fontName:name matchesPattern:pattern]) return(name);
        }
        return(def);
    }
    bool fontName:(NSString*)name matchesPattern:(NSString*)pattern {
        NSData *nd=[name dataUsingEncoding:NSASCIIStringEncoding allowLossyConversion:YES];
        if (!nd) return(NO);
        Unsigned nlen=nd.length;
        const char *ncs=(const char*)nd.bytes;
        
        for (Int pi=0,ni=0;pi<pattern.length;pi++) {
            char pc=[pattern characterAtIndex:pi];
            if ((pc>='a')&&(pc<='z')) pc-='a'-'A';
            while ((ni<nlen)&&(ncs[ni](ncs[ni]>='a' &&(ncs[ni]<='z')?'a'-'A':0)!=pc)) ni++;
            if (ni++==nlen) return(NO);
        }
        return(YES);
    }



<ViewUtilities>
    id +loadViewOfClass:(Class)clas withTag:(Int)tag fromNibWithName:(NSString*)nibName {@-999 
        id ret=nil;
        if (nibName) {
            NSArray *topLevelObjects=[[NSBundle mainBundle] loadNibNamed:nibName owner:nil options:nil];
            for (id obj in topLevelObjects) {
                if ([obj isKindOfClass:clas]&&
                    ((![obj isKindOfClass:[UIView class]])||(((UIView*)obj).tag==tag))) {
                    ret=obj;
                    break;
                }
            }
        }
        @999 return(ret);
    }

ViewUtilities<ViewUtilities>


<PermissiveGestureRecognizerDelegate:UIGestureRecognizerDelegate>
    BOOL gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer *)otherGestureRecognizer {
        return(YES);
    }

