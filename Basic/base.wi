"<objc/runtime.h>"


/*top
    typedef NSInteger Int;
    typedef NSUInteger Unsigned;
    extern NSInteger __bpc,__breakAtBP;
    void BPoint();
    void ERR(const char *format,...);
*/
/*top:impl
    NSInteger __bpc=0,__breakAtBP=0;
    void BPoint() {
        if (__breakAtBP==++__bpc) {
            printf("\n>>>>>>Breakpoint %d\n",(int)__bpc);
        }
    }
    void ERR(const char *format,...) {
        va_list pArgs;
        va_start(pArgs, format);
        vprintf(format, pArgs);
        va_end(pArgs);
        printf("\n");
    }
*/
/*protocols
#define CHECKZOMBIE(fn) {if ([self respondsToSelector:@selector(isZombie)]&&[(id<Object>)self isZombie]) ERR("Zombie call to %p: " #fn,self);}
*/





<BaseClass>
    +(id)get;
    +(id)getWithDictionary:(NSDictionary*)d;


<EssentialBaseView>
    -(void)layoutSubviews {@-500 [super layoutSubviews];}
<BaseView:EssentialBaseView>
    -(init)initWithFrame:(CGRect)frame {}
    -(init)initWithCoder:(NSCoder*)aDecoder {}
    -(init)init {}

<BaseObject>
    //NSDictionary *__dictionaryForInit=nil (publicreadonly,ivar=__dictionaryForInit)
    
    //Int __rc=1,__arc=0;
    -(init)init {}
    /*-(init[super init])initWithDictionary:(NSDictionary*)d {/ *-950* /__dictionaryForInit=d;
        / *950* /__dictionaryForInit=nil;
    }*/
    -(void)setWithDictionary:(NSDictionary*)d {}
    +(__Class__*)get {return([[__Class__ alloc] init]);}
    /*+(__Class__*)getWithDictionary:(NSDictionary*)d {
        NSObject<BaseObject> *o=[[ObjectRegistry getDefault].allObjects objectForKey:d];
        if (o) return([o isKindOfClass:[__Class__ class]]?(__Class__*)o:nil);
        return([[__Class__ alloc] initWithDictionary:d]);
    }*/

    //-(void)addGraph:(NSMutableSet*)s {@-999 
    //    if ([s containsObject:self]) return;
    //    [s addObject:[ObjectPointer dataForObject:self]];
    //}

    //NSMutableDictionary *asNewDictionary={@-999 
    //    NSMutableDictionary *ret=[MutableDictionary dictionary];
    //    [ret setObject:[NSString stringWithFormat:@"%s",class_getName([self class])] forKey:@"___class"];
    //    [ret setObject:[ObjectPointer dataForObject:self] forKey:@"___id"];
    //    @999 return(ret);
    //}




<DerivedBaseObject>
    -(init)init {}
    //-(init)initWithDictionary:(NSDictionary*)d {}

    +(__Class__*)get {return([[__Class__ alloc] init]);}
    /*+(__Class__*)getWithDictionary:(NSDictionary*)d {
        NSObject<BaseObject> *o=[[ObjectRegistry getDefault].allObjects objectForKey:d];
        if (o) return([o isKindOfClass:[__Class__ class]]?(__Class__*)o:nil);
        return([[__Class__ alloc] initWithDictionary:d]);
    }*/

    //-(void)setWithDictionary:(NSDictionary*)d {@-900 [super setWithDictionary:d];}
    //-(void)addGraph:(NSMutableSet*)s {@-999 
    //    if ([s containsObject:self]) return;
    //    [super addGraph:s];
    //}

    //NSMutableDictionary *asNewDictionary={@-999 
    //    NSMutableDictionary *ret=super.asNewDictionary;
    //    @999 return(ret);
    //} (noivar)


NSObject
    -(WeakSelf*)weakSelf
        void *key=@selector(weakSelf);
        WeakSelf *weakSelf=objc_getAssociatedObject(self,key);
        if (!weakSelf) {
            objc_setAssociatedObject(self, key, weakSelf=[WeakSelf weakSelfFromObject:self], OBJC_ASSOCIATION_RETAIN_NONATOMIC);
        }
        return(weakSelf);

    -(bool)isWeakSelf
        return(NO);

    -(id)strongSelf
        return(self);

    -(id)selfWithWeakness:(bool)weak
        return(weak?self.weakSelf:self);

WeakSelf
    Unsigned index=0,hash=0 (readonly,nonatomic)
    id strongSelf=nil (readonly,weak,nonatomic)

    -(instancetype)initWithStrongSelf:(id)strongSelf
        static Int s_index=0;
        if ((self=[super init])) {
            index=++s_index;
            hash=[((v_strongSelf=strongSelf)) hash];
        }
        return(self);

    -(instancetype)initCopyFrom:(WeakSelf*)copy
        if ((self=[super init])) {
            index=copy->index;
            hash=copy->hash;
            v_strongSelf=copy->v_strongSelf;
        }
        return(self);

    +(WeakSelf*)weakSelfFromObject:(id)strongSelf
        return [[WeakSelf alloc] initWithStrongSelf:strongSelf];

    -(WeakSelf*)weakSelf
        return(self);

    -(id)selfWithWeakness:(bool)weak
        return(weak?self:v_strongSelf);

    -(bool)isWeakSelf
        return(YES);

    -(instancetype)copyWithZone:(NSZone *)zone
        return [[WeakSelf allocWithZone:zone] initCopyFrom:self];

    -(BOOL)isEqual:(id)object
        return(object&&((object==self)||(object==v_strongSelf)||([object isKindOfClass:WeakSelf.class]&&(((WeakSelf*)object))->index==index)));
