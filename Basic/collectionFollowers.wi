



<NSSetWrapper>
    NSSet __set (readonly,dealloc)

    -(void)initObj {}

    // initializing a set

    -(id)init {@-999 
        if (!(self=[super init])) return(nil);
        @-100 __set=[[NSSet alloc] init];
        @0 [self initObj];
        @999 return(self);
    }
    -(id)initWithCoder:(NSCoder*)coder {@-999 
        if (!(self=[super init])) return(nil);
        @-100 __set=[[NSSet alloc] initWithCoder:coder];
        @0 [self initObj];
        @999 return(self);
    }
    -(id)initWithArray:(NSArray*)array {@-999 
        if (!(self=[super init])) return(nil);
        @-100 __set=[[NSSet alloc] initWithArray:array];
        @0 [self initObj];
        @999 return(self);
    }
    -(id)initWithObjects:(id*)objects count:(NSUInteger)count {@-999 
        if (!(self=[super init])) return(nil);
        @-100 __set=[[NSSet alloc] initWithObjects:objects count:count];
        @0 [self initObj];
        @999 return(self);
    }
    -(id)initWithArray:(NSSet*)set {@-999 
        if (!(self=[super init])) return(nil);
        @-100 __set=[[NSSet alloc] initWithSet:set];
        @0 [self initObj];
        @999 return(self);
    }
    -(id)initWithSet:(NSSet*)set copyItems:(BOOL)copy {@-999 
        if (!(self=[super init])) return(nil);
        @-100 __set=[[NSSet alloc] initWithSet:set copyItems:copy];
        @0 [self initObj];
        @999 return(self);
    }


    -(void)encodeWithCoder:(NSCoder*)coder {
        [__set encodeWithCoder:coder];
    }

    -(id)copyWithZone:(NSZone*)zone {
        return([[__WI_CLASS__ allocWithZone:zone] init]);
    }

    - (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(id *)stackbuf count:(NSUInteger)len {
        return([__set countByEnumeratingWithState:state objects:stackbuf count:len]);
    }



    // Creating a set
    + (__WI_CLASS__*)set {return([[[__WI_CLASS__ alloc] init] autorelease]);}
    + (__WI_CLASS__*)setWithArray:(NSArray*)array {return([[[__WI_CLASS__ alloc] initWithArray:array] autorelease]);}
    + (__WI_CLASS__*)setWithObject:(id)object {return([[[__WI_CLASS__ alloc] initWithObjects:&object count:1] autorelease]);}
    //+ (__WI_CLASS__*)setWithObjects:( {return([[[__WI_CLASS__ alloc] init] autorelease]);}
    + (__WI_CLASS__*)setWithObjects:(id*)objects count:(NSUInteger)count {return([[[__WI_CLASS__ alloc] initWithObjects:objects count:count] autorelease]);}
    + (__WI_CLASS__*)setWithSet:(NSSet*)set {return([[[__WI_CLASS__ alloc] initWithSet:set] autorelease]);}
    -(NSSet*)setByAddingObject:(id)object {return([__set setByAddingObject:object]);}
    //-(NSSet*)setByAddingObjects: {return([__set setByAddingObject:object]);}
    -(NSSet*)setByAddingObjects:(id*)objects count:(NSUInteger)count {return([__set setByAddingObjects:objects count:count]);}
    -(NSSet*)setByAddingObjectsFromSet:(NSSet*)set {return([__set setByAddingObjectsFromSet:set]);}
    -(NSSet*)setByAddingObjectsFromArray:(NSArray*)array {return([__set setByAddingObjectsFromArray:array]);}


    // Counting Entries
    NSUInteger count={return([__set count]);}


    // Accessing Set Members
    NSArray allObjects={return([__set allObjects]);}
    id anyObject={return([__set anyObject]);}
    –(BOOL)containsObject:(id)object {return([__set containsObject:object]);}
    –(NSSet*)filteredSetUsingPredicate:(NSPredicate *)predicate {return([__set filteredSetUsingPredicate:predicate]);}
    –(void)makeObjectsPerformSelector:(SEL)selector {[__set makeObjectsPerformSelector:selector];}
    –(void)makeObjectsPerformSelector:(SEL)selector withObject:(id)object {[__set makeObjectsPerformSelector:selector withObject:object];}
    –(id)member:(id)object {return([__set member:object]);}
    NSEnumerator objectEnumerator={return([__set objectEnumerator]);}
    - (void)enumerateObjectsUsingBlock:(void (^)(id obj, BOOL *stop))block {
        [__set enumerateObjectsUsingBlock:block];
    }
    - (void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^)(id obj, BOOL *stop))block {
        [__set enumerateObjectsWithOptions:opts usingBlock:block];
    }

    - (NSSet*)objectsPassingTest:(BOOL (^)(id obj, BOOL *stop))predicate {return([__set objectsPassingTest:predicate]);}
    - (NSSet*)objectsWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, BOOL *stop))predicate {return([__set objectsWithOptions:opts passingTest:predicate]);}


    //Comparing Sets
    –(BOOL)isSubsetOfSet:(NSSet*)set {return([__set isSubsetOfSet:set]);}
    –(BOOL)intersectsSet:(NSSet*)set {return([__set intersectsSet:set]);}
    –(BOOL)isEqualToSet:(NSSet*)set {return([__set isEqualToSet:set]);}
    - (void)setValue:(id)value forKey:(NSString *)key {[__set setValue:value forKey:key];}
    –(id)valueForKey:(NSString*)key {return([__set valueForKey:key]);}


    //Creating a Sorted Array
    - (NSArray*)sortedArrayUsingDescriptors:(NSArray*)sortDescriptors {return([__set sortedArrayUsingDescriptors:sortDescriptors]);}


    //Key-Value Observing
    - (void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context {
        [__set addObserver:observer forKeyPath:keyPath options:options context:context];
    }
    –(void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath {
        [__base removeObserver:observer forKeyPath:keyPath];
    }
    - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(void *)context {
        [__base removeObserver:observer forKeyPath:keyPath context:context];
    }


    //Describing a Set
    NSString description={return([__set description]);}
    - (NSString*)descriptionWithLocale:(id)locale {return([__set descriptionWithLocale:locale]);}








<NSArrayWrapper>
    NSArray __array (readonly,dealloc)

    -(void)initObj {}

    // initializing a set

    -(id)init {@-999 
        if (!(self=[super init])) return(nil);
        @-100 __array=[[NSArray alloc] init];
        @0 [self initObj];
        @999 return(self);
    }
    -(id)initWithCoder:(NSCoder*)coder {@-999 
        if (!(self=[super init])) return(nil);
        @-100 __array=[[NSArray alloc] initWithCoder:coder];
        @0 [self initObj];
        @999 return(self);
    }
    -(id)initWithArray:(NSArray*)array {@-999 
        if (!(self=[super init])) return(nil);
        @-100 __array=[[NSArray alloc] initWithArray:array];
        @0 [self initObj];
        @999 return(self);
    }
    -(id)initWithArray:(NSArray*)array copyItems:(BOOL)copy {@-999 
        if (!(self=[super init])) return(nil);
        @-100 __array=[[NSArray alloc] initWithArray:array copyItems:copy];
        @0 [self initObj];
        @999 return(self);
    }
    -(id)initWithContentsOfFile:(NSString*)file {@-999 
        if (!(self=[super init])) return(nil);
        @-100 __array=[[NSArray alloc] initWithContentsOfFile:file];
        @0 [self initObj];
        @999 return(self);
    }
    -(id)initWithContentsOfURL:(NSURL*)url {@-999 
        if (!(self=[super init])) return(nil);
        @-100 __array=[[NSArray alloc] initWithContentsOfURL:url];
        @0 [self initObj];
        @999 return(self);
    }
    -(id)initWithObjects:(id*)objects count:(NSUInteger)count {@-999 
        if (!(self=[super init])) return(nil);
        @-100 __array=[[NSArray alloc] initWithObjects:objects count:count];
        @0 [self initObj];
        @999 return(self);
    }


    -(void)encodeWithCoder:(NSCoder*)coder {
        [__array encodeWithCoder:coder];
    }

    -(id)copyWithZone:(NSZone*)zone {
        return([[__WI_CLASS__ allocWithZone:zone] init]);
    }

    - (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(id *)stackbuf count:(NSUInteger)len {
        return([__array countByEnumeratingWithState:state objects:stackbuf count:len]);
    }



    // Creating an array
    + (__WI_CLASS__*)array {return([[[__WI_CLASS__ alloc] init] autorelease]);}
    + (__WI_CLASS__*)arrayWithArray:(NSArray*)array {return([[[__WI_CLASS__ alloc] initWithArray:array] autorelease]);}
    + (__WI_CLASS__*)arrayWithContentsOfFile:(NSString*)file {return([[[__WI_CLASS__ alloc] initWithContentsOfFile:file] autorelease]);}
    + (__WI_CLASS__*)arrayWithContentsOfURL:(NSURL*)url {return([[[__WI_CLASS__ alloc] initWithContentsOfURL:url] autorelease]);}
    + (__WI_CLASS__*)arrayWithObject:(id)object {return([[[__WI_CLASS__ alloc] initWithObjects:&object count:1] autorelease]);}
    //+ (__WI_CLASS__*)arrayWithObjects:( {return([[[__WI_CLASS__ alloc] init] autorelease]);}
    + (__WI_CLASS__*)arrayWithObjects:(id*)objects count:(NSUInteger)count {return([[[__WI_CLASS__ alloc] initWithObjects:objects count:count] autorelease]);}






    //Querying an Array
    –(BOOL)containsObject:(id)object {return([__array containsObject:object]);}
    NSUInteger count={return([__array count]);}
    -(void)getObjects:(__strong id[])aBuffer range:(NSRange)aRange {[__array getObjects:aBuffer range:aRange];}
    id lastObject={return([__array lastObject]);}
    –(id)objectAtIndex:(NSUInteger)index {return([__array objectAtIndex:index]);}
    –(NSArray*)objectsAtIndexes:(NSIndexSet*)indexes {return([__array objectsAtIndexes:indexes]);}
    NSEnumerator objectEnumerator={return([__array objectEnumerator]);}
    NSEnumerator reverseObjectEnumerator={return([__array reverseObjectEnumerator]);}


    //Finding Objects in an Array
    –(NSUInteger)indexOfObject:(id)object {
        return([__array indexOfObject:object]);
    }
    –(NSUInteger)indexOfObject:(id)object inRange:(NSRange)range {
        return([__array indexOfObject:object inRange:range]);
    }
    –(NSUInteger)indexOfObjectIdenticalTo:(id)object {
        return([__array indexOfObjectIdenticalTo:object]);
    }
    –(NSUInteger)indexOfObjectIdenticalTo:(id)object inRange:(NSRange)range {
        return([__array indexOfObjectIdenticalTo:object inRange:range]);
    }
    - (NSUInteger)indexOfObjectPassingTest:(BOOL (^)(id obj, NSUInteger idx, BOOL *stop))predicate {
        return([__array indexOfObjectPassingTest:predicate]);
    }
    - (NSUInteger)indexOfObjectWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, NSUInteger idx, BOOL *stop))predicate {
        return([__array indexOfObjectWithOptions:opts passingTest:predicate]);
    }
    - (NSUInteger)indexOfObjectAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, NSUInteger idx, BOOL *stop))predicate {
        return([__array indexOfObjectAtIndexes:indexSet options:opts passingTest:predicate]);
    }
    - (NSIndexSet*)indexesOfObjectPassingTest:(BOOL (^)(id obj, NSUInteger idx, BOOL *stop))predicate {
        return([__array indexesOfObjectPassingTest:predicate]);
    }
    - (NSIndexSet*)indexesOfObjectWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, NSUInteger idx, BOOL *stop))predicate {
        return([__array indexesOfObjectWithOptions:opts passingTest:predicate]);
    }
    - (NSIndexSet*)indexesOfObjectAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, NSUInteger idx, BOOL *stop))predicate {
        return([__array indexesOfObjectAtIndexes:indexSet options:opts passingTest:predicate]);
    }
    - (NSUInteger)indexOfObject:(id)obj inSortedRange:(NSRange)r options:(NSBinarySearchingOptions)opts usingComparator:(NSComparator)cmp {
        return([__array indexOfObject:obj inSortedRange:r options:opts usingComparator:cmp]);
    }


    //Sending Messages to Elements
    –(void)makeObjectsPerformSelector:(SEL)selector {
        [__array makeObjectsPerformSelector:selector];
    }
    –(void)makeObjectsPerformSelector:(SEL)selector withObject:(id)object {
        [__array makeObjectsPerformSelector:selector withObject:object];
    }
    - (void)enumerateObjectsUsingBlock:(void (^)(id obj, NSUInteger idx, BOOL *stop))block {
        [__array enumerateObjectsUsingBlock:block];
    }
    - (void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^)(id obj, NSUInteger idx, BOOL *stop))block {
        [__array enumerateObjectsWithOptions:opts usingBlock:block];
    }
    - (void)enumerateObjectsAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts usingBlock:(void (^)(id obj, NSUInteger idx, BOOL *stop))block {
        [__array enumerateObjectsAtIndexes:indexSet options:opts usingBlock:block];
    }


    //Comparing Arrays
    –(id)firstObjectCommonWithArray:(NSArray*)array {
        return([__array firstObjectCommonWithArray:array]);
    }
    –(BOOL)isEqualToArray:(NSArray*)array {
        return([__array isEqualToArray:array]);
    }


    //Deriving New Arrays
    –(NSArray*)arrayByAddingObject:(id)object {
        return([__array arrayByAddingObject:object]);
    }
    –(NSArray*)arrayByAddingObjectsFromArray:(NSArray*)array {
        return([__array arrayByAddingObjectsFromArray:array]);
    }
    - (NSArray*)filteredArrayUsingPredicate:(NSPredicate *)predicate {
        return([__array filteredArrayUsingPredicate:predicate]);
    }
    –(NSArray*)subarrayWithRange:(NSRange)r {
        return([__array subarrayWithRange:r]);
    }


    //Sorting
    –(NSData*)sortedArrayHint {
        return([__array sortedArrayHint]);
    }
    - (NSArray *)sortedArrayUsingFunction:(NSInteger (*)(id, id, void *))comparator context:(void *)context {
        return([__array sortedArrayUsingFunction:comparator context:context]);
    }
    - (NSArray *)sortedArrayUsingFunction:(NSInteger (*)(id, id, void *))comparator context:(void *)context hint:(NSData *)hint {
        return([__array sortedArrayUsingFunction:comparator context:context hint:hint]);
    }
    - (NSArray *)sortedArrayUsingDescriptors:(NSArray *)sortDescriptors {
        return([__array sortedArrayUsingDescriptors:sortDescriptors]);
    }
    –(NSArray*)sortedArrayUsingSelector:(SEL)selector {
        return([__array sortedArrayUsingSelector:selector]);
    }
    - (NSArray *)sortedArrayUsingComparator:(NSComparator)cmptr {
        return([__array sortedArrayUsingComparator:cmptr]);
    }
    - (NSArray *)sortedArrayWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr {
        return([__array sortedArrayWithOptions:opts usingComparator:cmptr]);
    }


    //Working with String Elements
    - (NSString *)componentsJoinedByString:(NSString *)separator {
        return([__array componentsJoinedByString:separator]);
    }


    //Creating a Description
    NSString description={return([__array description]);}
    - (NSString *)descriptionWithLocale:(id)locale {
        return([__array descriptionWithLocale:locale]);
    }
    - (NSString *)descriptionWithLocale:(id)locale indent:(NSUInteger)level {
        return([__array descriptionWithLocale:locale indent:level]);
    }
    - (BOOL)writeToFile:(NSString *)path atomically:(BOOL)flag {
        return([__array writeToFile:path atomically:flag]);
    }
    - (BOOL)writeToURL:(NSURL *)url atomically:(BOOL)flag {
        return([__array writeToURL:url atomically:flag]);
    }


    //Collecting Paths
    - (NSArray *)pathsMatchingExtensions:(NSArray *)filterTypes {
        return([__array pathsMatchingExtensions:filterTypes]);
    }


    //Key-Value Observing
    - (void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context {
        [__array addObserver:observer forKeyPath:keyPath options:options context:context];
    }
    –(void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath {
        [__array removeObserver:observer forKeyPath:keyPath];
    }
    - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(void *)context {
        [__array removeObserver:observer forKeyPath:keyPath context:context];
    }
    - (void)removeObserver:(NSObject *)observer fromObjectsAtIndexes:(NSIndexSet*)indexes forKeyPath:(NSString *)keyPath context:(void *)context {
        [__array removeObserver:observer fromObjectsAtIndexes:indexes forKeyPath:keyPath context:context];
    }
    - (void)addObserver:(NSObject *)observer toObjectsAtIndexes:(NSIndexSet*)indexes forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context {
        [__array addObserver:observer toObjectsAtIndexes:indexes forKeyPath:keyPath options:options context:context];
    }
    - (void)removeObserver:(NSObject *)observer fromObjectsAtIndexes:(NSIndexSet*)indexes forKeyPath:(NSString *)keyPath {
        [__array removeObserver:observer fromObjectsAtIndexes:indexes forKeyPath:keyPath];
    }


    //Key-Value Coding
    - (void)setValue:(id)value forKey:(NSString *)key {
        [__array setValue:value forKey:key];
    }
    –(id)valueForKey:(NSString*)key {
        return([__array valueForKey:key]);
    }












<NSDictionary Wrapper>
    NSDictionary __dictionary (readonly,dealloc)

    -(void)initObj {}

    // initializing a set

    -(id)init {@-999 
        if (!(self=[super init])) return(nil);
        @-100 __dictionary=[[NSDictionary alloc] init];
        @0 [self initObj];
        @999 return(self);
    }
    -(id)initWithCoder:(NSCoder*)coder {@-999 
        if (!(self=[super init])) return(nil);
        @-100 __dictionary=[[NSDictionary alloc] initWithCoder:coder];
        @0 [self initObj];
        @999 return(self);
    }
    -(id)initWithContentsOfFile:(NSString*)file {@-999 
        if (!(self=[super init])) return(nil);
        @-100 __dictionary=[[NSDictionary alloc] initWithContentsOfFile:file];
        @0 [self initObj];
        @999 return(self);
    }
    -(id)initWithContentsOfURL:(NSURL*)url {@-999 
        if (!(self=[super init])) return(nil);
        @-100 __dictionary=[[NSDictionary alloc] initWithContentsOfURL:url];
        @0 [self initObj];
        @999 return(self);
    }
    -(id)initWithDictionary:(NSDictionary*)dictionary {@-999 
        if (!(self=[super init])) return(nil);
        @-100 __dictionary=[[NSDictionary alloc] initWithDictionary:dictionary];
        @0 [self initObj];
        @999 return(self);
    }
    -(id)initWithDictionary:(NSDictionary*)dictionary copyItems:(BOOL)copy {@-999 
        if (!(self=[super init])) return(nil);
        @-100 __dictionary=[[NSDictionary alloc] initWithDictionary:dictionary copyItems:copy];
        @0 [self initObj];
        @999 return(self);
    }
    -(id)initWithObjects:(const id[])objects forKeys:(const id<NSCopying>[])keys count:(NSUInteger)count {@-999 
        if (!(self=[super init])) return(nil);
        @-100 __dictionary=[[NSDictionary alloc] initWithObjects:objects keys:keys count:count];
        @0 [self initObj];
        @999 return(self);
    }


    -(void)encodeWithCoder:(NSCoder*)coder {
        [__dictionary encodeWithCoder:coder];
    }

    -(id)copyWithZone:(NSZone*)zone {
        return([[__WI_CLASS__ allocWithZone:zone] init]);
    }

    - (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(id *)stackbuf count:(NSUInteger)len {
        return([__dictionary countByEnumeratingWithState:state objects:stackbuf count:len]);
    }



    // Creating an dictionary
    + (__WI_CLASS__*)dictionary {return([[[__WI_CLASS__ alloc] init] autorelease]);}
    + (__WI_CLASS__*)dictionaryWithContentsOfFile:(NSString*)file {return([[[__WI_CLASS__ alloc] initWithContentsOfFile:file] autorelease]);}
    + (__WI_CLASS__*)dictionaryWithContentsOfURL:(NSURL*)url {return([[[__WI_CLASS__ alloc] initWithContentsOfURL:url] autorelease]);}
    + (__WI_CLASS__*)dictionaryWithDictionary:(NSDictionary*)dictionary {return([[[__WI_CLASS__ alloc] initWithDictionary:dictionary] autorelease]);}
    + (__WI_CLASS__*)dictionaryWithObject:(id)object forKey:(id<NSCopying>)key {return([[[__WI_CLASS__ alloc] initWithObject:object forKey:key] autorelease])
    + (__WI_CLASS__*)dictionaryWithObjects:(__strong id[])objects forKeys:(__strong id<NSCopying>[])keys count:(NSUInteger)count {return([[[__WI_CLASS__ alloc] initWithObjects:objects forKeys:keys count:/*ivar*/count] autorelease])




    //Counting Entries
    NSUInteger count={return([__dictionary count]);}
    
    
    //Comparing Dictionaries
    –(BOOL)isEqualToDictionary:(NSDictionary*)dictionary {return([__dictionary isEqualToDictionary:dictionary]);}
    
    
    //Accessing Keys and Values
    NSArray allKeys={return([__dictionary allKeys]);}
    -(NSArray*)allKeysForObject:(id)object {return([__dictionary allKeysForObject:object]);}
    NSArray allValues={return([__dictionary allValues]);}
    -(void)getObjects:(id __unsafe_unretained [])objects andKeys:(id __unsafe_unretained [])keys {
        [__dictionary getObjects:objects andKeys:keys];
    }
    –(id)objectForKey:(id<NSCopying>)key {return{[__dictionary objectForKey:key]);}
    - (NSArray*)objectsForKeys:(NSArray *)keys notFoundMarker:(id)anObject {
        return([__dictionary objectsForKeys:keys notFoundMarker:anObject]);
    }
    –(id)valueForKey:(NSString*)key {return{[__dictionary valueForKey:key]);}
    
    
    //Enumerating Dictionaries
    NSEnumerator keyEnumerator={return([__dictionary keyEnumerator]);}
    NSEnumerator objectEnumerator={return([__dictionary objectEnumerator]);}
    - (void)enumerateKeysAndObjectsUsingBlock:(void (^)(id key, id obj, BOOL *stop))block {
        [__dictionary enumerateKeysAndObjectsUsingBlock:block];
    }
    - (void)enumerateKeysAndObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^)(id key, id obj, BOOL *stop))block {
        [__dictionary enumerateKeysAndObjectsWithOptions:opts usingBlock:block];
    }
    
    
    //Sorting Dictionaries
    –(NSArray*)keysSortedByValueUsingSelector:(SEL)selector {
        return([__dictionary keysSortedByValueUsingSelector:selector]);
    }
    –(NSArray*)keysSortedByValueUsingComparator:(NSComparator)cmptr {
        return([__dictionary keysSortedByValueUsingComparator:cmptr]);
    }
    –(NSArray*)keysSortedByValueWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr {
        return([__dictionary keysSortedByValueWithOptions:opts usingComparator:cmptr]);
    }
    
    
    //Filtering Dictionaries
    - (NSSet *)keysOfEntriesPassingTest:(BOOL (^)(id key, id obj, BOOL *stop))predicate {
        return([__dictionary keysOfEntriesPassingTest:predicate]);
    }
    - (NSSet *)keysOfEntriesWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id key, id obj, BOOL *stop))predicate {
        return([__dictionary keysOfEntriesWithOptions:opts passingTest:predicate]);
    }
    
    
    //Storing Dictionaries
    - (BOOL)writeToFile:(NSString *)path atomically:(BOOL)flag {
        return([__dictionary writeToFile:path atomically:flag]);
    }
    - (BOOL)writeToURL:(NSURL *)url atomically:(BOOL)flag {
        return([__dictionary writeToURL:url atomically:flag]);
    }
    
    
    //Accessing File Attributes
    NSDate fileCreationDate={return([__dictionary fileCreationDate]);}
    BOOL fileExtensionHidden={return([__dictionary fileExtensionHidden]);}
    NSNumber fileGroupOwnerAccountID={return([__dictionary fileGroupOwnerAccountID]);}
    NSString fileGroupOwnerAccountName={return([__dictionary fileGroupOwnerAccountName]);}
    OSType fileHFSCreatorCode={return([__dictionary fileHFSCreatorCode]);}
    OSType fileHFSTypeCode={return([__dictionary fileHFSTypeCode]);}
    BOOL fileIsAppendOnly={return([__dictionary fileIsAppendOnly]);}
    BOOL fileIsImmutable={return([__dictionary fileIsImmutable]);}
    NSDate fileModificationDate={return([__dictionary fileModificationDate]);}
    NSNumber fileOwnerAccountID={return([__dictionary fileOwnerAccountID]);}
    NSString fileOwnerAccountName={return([__dictionary fileOwnerAccountName]);}
    NSUInteger filePosixPermissions={return([__dictionary filePosixPermissions]);}
    ULL fileSize={return([__dictionary fileSize]);}
    NSUInteger fileSystemFileNumber={return([__dictionary fileSystemFileNumber]);}
    NSIndexSet fileSystemNumber={return([__dictionary fileSystemNumber]);}
    NSString fileType={return([__dictionary fileType]);}
    
    
    //Creating a Description
    NSString description={return([__dictionary description]);}
    NSString descriptionInStringsFileFormat={return([__dictionary descriptionInStringsFileFormat]);}
    - (NSString *)descriptionWithLocale:(id)locale {
        return([__dictionary descriptionWithLocale:locale]);
    }
    - (NSString *)descriptionWithLocale:(id)locale indent:(NSUInteger)level {
        return([__dictionary descriptionWithLocale:locale indent:level]);
    }








    –(bool)addObject:(id)object {
        if ((![self containsObject:object])&&[self shouldAddObject:object]) {
            [__base addObject:object weak:weakObjects];
            return(YES);
        }
        else return(NO);
    }
    –(bool)removeObject:(id)object {
        if ([self containsObject:object]) {
            [self willRemoveObject:object];
            [__base removeObject:object];
            return(YES);
        }
        else return(NO);
    }
    –(void)removeAllObjects {
        for (id object in self) [self willRemoveObject:object];
        [__base removeAllObjects];
    }
    –(int)addObjectsFromArray:(NSArray*)array {
        int ret=0;
        for (id object in array) if ([self addObject:object]) ret++;
        return(ret);
    }
    –(int)unionSet:(NSSet*)set {
        int ret=0;
        for (id object in set) if ([self addObject:object]) ret++;
        return(ret);
    }
    –(int)minusSet:(NSSet*)set {
        int ret=0;
        for (id object in set) if ([self removeObject:object]) ret++;
        return(ret);
    }
    –(int)intersectSet:(NSSet*)set {
        int ret=0;
        for (id object in self) if ((![set containsObject:object])&&[self removeObject:object]) ret++;
        return(ret);
    }
    – setSet:(NSSet*)set {
        [self removeAllObjects];
        int ret=0;
        for (id object in set) if ([self addObject:object]) ret++;
        return(ret);
    }
    -(void)encodeWithCoder:(NSCoder*)coder {
        [__base encodeWithCoder:code];
    }
    - (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(id *)stackbuf count:(NSUInteger)len {
        NSUInteger ret=[__base countByEnumeratingWithState:state objects:stackbuf count:len];
        for (NSUInteger i=0;i<ret;i++) {
            stackbuf[i]=[WeakObject deref:stackbuf[i]];
        }
        return(ret);
    }
    +(MutableSet*)set {return([[[MutableSet alloc] init] autorelease]);}
    –(NSUInteger)count {return(__base.count);}
    –(NSArray*)allObjects {
        NSMutableArray *ret=[NSMutableArray arrayWithCapacity:__base.count];
        for (id object in self) [ret addObject:object];
        return(ret);
    }
    –(id)anyObject {
        return([WeakObject deref:[__base anyObject]]);
    }
    –(BOOL)containsObject:(id)object {
        return([__base containsObject:object]);
    }
    –(void)makeObjectsPerformSelector:(SEL)selector {
        for (id object in self) if ([object respondsToSelector:selector]) {
            [object performSelector:selector];
        }
    }
    –(void)makeObjectsPerformSelector:(SEL)selector withObject:obj {
        for (id object in self) if ([object respondsToSelector:selector]) {
            [object performSelector:selector withObject:obj];
        }
    }
    –(BOOL)member:(id)object {
        return([__base member:object]);
    }
    –(BOOL)isSubsetOfSet:(NSSet*)set {
        for (id object in self) if (![set containsObject:object]) return(NO);
        return(YES);
    }
    –(BOOL)intersectsSet:(NSSet*)set {
        for (id object in self) if ([set containsObject:object]) return(YES);
        return(NO);
    }
    –(BOOL)isEqualToSet:(NSSet*)set {
        return((set.count==self.count)&&[self isSubsetOfSet:set]);
    }
    –(NSString*)description {return(__base.description);}
    –(NSString*)descriptionWithLocale:(id)locale {
        return([__base.descriptionWithLocale:locale]);
    }

















MutableSet : NSMutableSet
    bool weakObjects

    NSMutableSet __base (readonly,dealloc)

    -(id)init {
        if (!(self=[super init])) return(nil);
        __base=[[NSMutableSet set] retain];
        weakObjects=NO;
        return(self);
    }
    -(id)initWithCoder:(NSCoder*)coder {
        if (!(self=[super init])) return(nil);
        __base=[[NSMutableSet alloc] initWithCoder:coder];
        weakObjects=NO;
        return(self);
    }
    -(id)initWithZone:(NSZone*)zone {
        if (!(self=[super init])) return(nil);
        __base=[[NSMutableSet allocWithZone:zone] init];
        weakObjects=NO;
        return(self);
    }
    -(id)copyWithZone:(NSZone*)zone {
        return([[MutableSet allocWithZone:zone] initWithZone:zone]);
    }
    -(id)mutableCopyWithZone:(NSZone*)zone {
        return([[MutableSet allocWithZone:zone] initWithZone:zone]);
    }

    +(MutableSet*)setWithCapacity {return([[[MutableSet alloc] init] autorelease]);}
    –(bool)addObject:(id)object {
        if ((![self containsObject:object])&&[self shouldAddObject:object]) {
            [__base addObject:object weak:weakObjects];
            return(YES);
        }
        else return(NO);
    }
    –(bool)removeObject:(id)object {
        if ([self containsObject:object]) {
            [self willRemoveObject:object];
            [__base removeObject:object];
            return(YES);
        }
        else return(NO);
    }
    –(void)removeAllObjects {
        for (id object in self) [self willRemoveObject:object];
        [__base removeAllObjects];
    }
    –(int)addObjectsFromArray:(NSArray*)array {
        int ret=0;
        for (id object in array) if ([self addObject:object]) ret++;
        return(ret);
    }
    –(int)unionSet:(NSSet*)set {
        int ret=0;
        for (id object in set) if ([self addObject:object]) ret++;
        return(ret);
    }
    –(int)minusSet:(NSSet*)set {
        int ret=0;
        for (id object in set) if ([self removeObject:object]) ret++;
        return(ret);
    }
    –(int)intersectSet:(NSSet*)set {
        int ret=0;
        for (id object in self) if ((![set containsObject:object])&&[self removeObject:object]) ret++;
        return(ret);
    }
    – setSet:(NSSet*)set {
        [self removeAllObjects];
        int ret=0;
        for (id object in set) if ([self addObject:object]) ret++;
        return(ret);
    }
    -(void)encodeWithCoder:(NSCoder*)coder {
        [__base encodeWithCoder:code];
    }
    - (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(id *)stackbuf count:(NSUInteger)len {
        NSUInteger ret=[__base countByEnumeratingWithState:state objects:stackbuf count:len];
        for (NSUInteger i=0;i<ret;i++) {
            stackbuf[i]=[WeakObject deref:stackbuf[i]];
        }
        return(ret);
    }
    +(MutableSet*)set {return([[[MutableSet alloc] init] autorelease]);}
    –(NSUInteger)count {return(__base.count);}
    –(NSArray*)allObjects {
        NSMutableArray *ret=[NSMutableArray arrayWithCapacity:__base.count];
        for (id object in self) [ret addObject:object];
        return(ret);
    }
    –(id)anyObject {
        return([WeakObject deref:[__base anyObject]]);
    }
    –(BOOL)containsObject:(id)object {
        return([__base containsObject:object]);
    }
    –(void)makeObjectsPerformSelector:(SEL)selector {
        for (id object in self) if ([object respondsToSelector:selector]) {
            [object performSelector:selector];
        }
    }
    –(void)makeObjectsPerformSelector:(SEL)selector withObject:obj {
        for (id object in self) if ([object respondsToSelector:selector]) {
            [object performSelector:selector withObject:obj];
        }
    }
    –(BOOL)member:(id)object {
        return([__base member:object]);
    }
    –(BOOL)isSubsetOfSet:(NSSet*)set {
        for (id object in self) if (![set containsObject:object]) return(NO);
        return(YES);
    }
    –(BOOL)intersectsSet:(NSSet*)set {
        for (id object in self) if ([set containsObject:object]) return(YES);
        return(NO);
    }
    –(BOOL)isEqualToSet:(NSSet*)set {
        return((set.count==self.count)&&[self isSubsetOfSet:set]);
    }
    –(NSString*)description {return(__base.description);}
    –(NSString*)descriptionWithLocale:(id)locale {
        return([__base.descriptionWithLocale:locale]);
    }










MutableArray : NSMutableArray
    bool weakObjects

    NSMutableArray __base (readonly,dealloc)

    –(void)addObject:(id)object {
        if ([self willAddObject:object atIndex:self.count]) {
            [__base addObject:object];
            [self didAddObject:object atIndex:self.count-1];
        }
    }
    –(void)addObjectsFromArray:(NSArray*)array {
        for (id object in array) [self addObject:object];
    }
    –(void)insertObject:(id)object atIndex:(NSUInteger)index {
        if ([self willAddObject:object atIndex:index]) {
            [__base insertObject:object atIndex:index];
            [self didAddObject:object atIndex:index];
        }
    }
    –(void)insertObjects:(NSArray*)array atIndexes:(NSIndexSet*)indexes {
        NSUInteger index=[indexes firstIndex];
        for (id object in array) {
            [self insertObject:object atIndex:index];
            index=[indexes indexGreaterThanIndex:index];
        }
    }
    –(void)removeAllObjects {
        NSArray *was=self.copy;
        for (id object in was) [self willRemoveObject:object];
        [__base removeAllObjects];
        for (id object in was) [self didRemoveObject:object];
        [was release];
    }
    –(void)removeLastObject {
        id object=self.lastObject;
        if (object) {
            [object retain];
            [self willRemoveObject:object];
            [__base removeLastObject];
            [self didRemoveObject:object];
            [object release];
        }
    }
    –(void)removeObject:(id)object {
        if ([self containsObject:object]) {
            [object retain];
            [self willRemoveObject:object];
            [__base removeObject:object];
            [self didRemoveObject:object];
            [object release];
        }
    }
    –(void)removeObjectAtIndex:(NSUInteger)index {
        id object=[self objectAtIndex:index];
        [object retain];
        [self willRemoveObject:object];
        [__base removeObjectAtIndex:index];
        [self didRemoveObject:object];
        [object release];
    }
    –(void)removeObjectsAtIndexes:(NSIndexSet*)indexes {
        for (NSUInteger index=indexes.lastIndex;index!=NSNotFound;index=[indexes indexLessThanIndex:index]) {
            [self removeObjectAtIndex:index];
        }
    }
    –(void)removeObjectsInArray:(NSArray*)array {
        for (id object in array) [self removeObject:object];
    }
    –(void)removeObjectsInRange:(NSRange)range {
        for (int i=0;i<range.length;i++) [self removeObjectAtIndex:range.location];
    }
    –(void)replaceObjectAtIndex:(NSUInteger)index withObject:(id)object {
        [self removeObjectAtIndex:index];
        [self insertObject:object atIndex:index];
    }
    –(void)replaceObjectsAtIndexes:(NSIndexSet*)indexes withObjects:(NSArray*)objects {
        NSUInteger index=[indexes firstIndex];
        for (id object in array) {
            [self replaceObjectAtIndex:index withObject:object];
            index=[indexes indexGreaterThanIndex:index];
        }
    }
    –(void)setArray:(NSArray*)array {
        [self removeAllObjects];
        [self addObjectsFromArray:array];
    }
    –(void)exchangeObjectAtIndex:(NSUInteger)indexa withObjectAtIndex:(NSUInteger)indexb {
    }
    - (void)sortUsingDescriptors:(NSArray *)sortDescriptors {
        [__base sortUsingDescriptors:sortDescriptors];
    }
    - (void)sortWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr {
        [__base sortWithOptions:opts usingComparator:cmptr];
    }
    - (void)sortUsingComparator:(NSComparator)cmptr {
        [__base sortUsingComparator:cmptr];
    }
    - (void)sortUsingFunction:(NSInteger (*)(id, id, void *))compare context:(void *)context {
        [__base sortUsingFunction:compare context:context];
    }
    - (void)sortUsingSelector:(SEL)comparator {
        [__base sortUsingSelector:comparator];
    }
    - (void)encodeWithCoder:(NSCoder*)coder {
        [__base encodeWithCoder:coder];
    }
    -(id)initWithCoder:(NSCoder*)coder {
        if (!([self=[super init]])) return(nil);
        [self initDefaultValues];
        __base=[[NSMutableArray alloc] initWithCoder:coder];
        [self initObj];
    }
    -(id)initWithZone:(NSZone*)zone {
        if (!([self=[super init]])) return(nil);
        [self initDefaultValues];
        __base=[[NSMutableArray allocWithZone:zone] init];
        [self initObj];
    }
    -(id)copyWithZone:(NSZone*)zone {
        MutableArray *ret=[[MutableArray allocWithZone:zone] initWithZone:zone];
        [ret addObjectsFromArray:self];
        return(ret);
    }
    - (id)mutableCopyWithZone:(NSZone*)zone {
        return(self.copy);
    }
    - (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(id *)stackbuf count:(NSUInteger)len {
        return([__base countByEnumeratingWithState:state objects:stackbuf count:len]);
    }
    +(MutableArray*)array {
        return([[[MutableArray alloc] init] autorelease]);
    }
    –(BOOL)containsObject:(id)object {
        return([__base containsObject:object]);
    }
    –(NSUInteger)count {return([__base count]);}
    - (void)getObjects:(__strong id[])aBuffer range:(NSRange)aRange {
        [__base getObjects:aBuffer range:aRange];
    }
    –(void)lastObject {
        return([__base lastObject]);
    }
    –(id)objectAtIndex:(NSUInteger)index {
        return([__base objectAtIndex:index]);
    }
    –(NSArray*)objectsAtIndexes:(NSIndexSet*)indexes {
        return([__base objectsAtIndexes:indexes]);
    }
    –(NSEnumerator*)objectEnumerator {
        return([__base objectEnumerator]);
    }
    –(NSEnumerator*)reverseObjectEnumerator {
        return([__base reverseObjectEnumerator]);
    }
    –(NSUInteger)indexOfObject:(id)object {
        return([__base indexOfObject:object]);
    }
    –(NSUInteger)indexOfObject:(id)object inRange:(NSRange)range {
        return([__base indexOfObject:object inRange:range]);
    }
    –(NSUInteger)indexOfObjectIdenticalTo:(id)object {
        return([__base indexOfObjectIdenticalTo:object]);
    }
    –(NSUInteger)indexOfObjectIdenticalTo:(id)object inRange:(NSRange)range {
        return([__base indexOfObjectIdenticalTo:object inRange:range]);
    }
    - (NSUInteger)indexOfObjectPassingTest:(BOOL (^)(id obj, NSUInteger idx, BOOL *stop))predicate {
        return([__base indexOfObjectPassingTest:predicate]);
    }
    - (NSUInteger)indexOfObjectWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, NSUInteger idx, BOOL *stop))predicate {
        return([__base indexOfObjectWithOptions:opts passingTest:predicate]);
    }
    - (NSUInteger)indexOfObjectAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, NSUInteger idx, BOOL *stop))predicate {
        return([__base indexOfObjectAtIndexes:indexSet options:opts passingTest:predicate]);
    }
    - (NSIndexSet*)indexesOfObjectPassingTest:(BOOL (^)(id obj, NSUInteger idx, BOOL *stop))predicate {
        return([__base indexesOfObjectPassingTest:predicate]);
    }
    - (NSIndexSet*)indexesOfObjectWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, NSUInteger idx, BOOL *stop))predicate {
        return([__base indexesOfObjectWithOptions:opts passingTest:predicate]);
    }
    - (NSIndexSet*)indexesOfObjectAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, NSUInteger idx, BOOL *stop))predicate {
        return([__base indexesOfObjectAtIndexes:indexSet options:opts passingTest:predicate]);
    }
    - (NSUInteger)indexOfObject:(id)obj inSortedRange:(NSRange)r options:(NSBinarySearchingOptions)opts usingComparator:(NSComparator)cmp {
        return([__base indexOfObject:obj inSortedRange:r options:opts usingComparator:cmp]);
    }
    –(void)makeObjectsPerformSelector:(SEL)selector {
        [__base makeObjectsPerformSelector:selector];
    }
    –(void)makeObjectsPerformSelector:(SEL)selector withObject:(id)object {
        [__base makeObjectsPerformSelector:selector withObject:object];
    }
    - (void)enumerateObjectsUsingBlock:(void (^)(id obj, NSUInteger idx, BOOL *stop))block {
        [__base enumerateObjectsUsingBlock:block];
    }
    - (void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^)(id obj, NSUInteger idx, BOOL *stop))block {
        [__base enumerateObjectsWithOptions:opts usingBlock:block];
    }
    - (void)enumerateObjectsAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts usingBlock:(void (^)(id obj, NSUInteger idx, BOOL *stop))block {
        [__base enumerateObjectsAtIndexes:indexSet options:opts usingBlock:block];
    }
    –(id)firstObjectCommonWithArray:(NSArray*)array {
        return([__base firstObjectCommonWithArray:array]);
    }
    –(BOOL)isEqualToArray:(NSArray*)array {
        return([__base isEqualToArray:array]);
    }
    –(NSArray*)arrayByAddingObject:(id)object {
        return([__base arrayByAddingObject:object]);
    }
    –(NSArray*)arrayByAddingObjectsFromArray:(NSArray*)array {
        return([__base arrayByAddingObjectsFromArray:array]);
    }
    - (NSArray*)filteredArrayUsingPredicate:(NSPredicate *)predicate {
        return([__base filteredArrayUsingPredicate:predicate]);
    }
    –(NSArray*)subarrayWithRange:(NSRange)r {
        return([__base subarrayWithRange:r]);
    }
    –(NSData*)sortedArrayHint {
        return([__base sortedArrayHint]);
    }
    - (NSArray *)sortedArrayUsingFunction:(NSInteger (*)(id, id, void *))comparator context:(void *)context {
        return([__base sortedArrayUsingFunction:comparator context:context]);
    }
    - (NSArray *)sortedArrayUsingFunction:(NSInteger (*)(id, id, void *))comparator context:(void *)context hint:(NSData *)hint {
        return([__base sortedArrayUsingFunction:comparator context:context hint:hint]);
    }
    - (NSArray *)sortedArrayUsingDescriptors:(NSArray *)sortDescriptors {
        return([__base sortedArrayUsingDescriptors:sortDescriptors]);
    }
    –(NSArray*)sortedArrayUsingSelector:(SEL)selector {
        return([__base sortedArrayUsingSelector:selector]);
    }
    - (NSArray *)sortedArrayUsingComparator:(NSComparator)cmptr {
        return([__base sortedArrayUsingComparator:cmptr]);
    }
    - (NSArray *)sortedArrayWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr {
        return([__base sortedArrayWithOptions:opts usingComparator:cmptr]);
    }
    - (NSString *)componentsJoinedByString:(NSString *)separator {
        return([__base componentsJoinedByString:separator]);
    }
    –(NSString*)description {
        return([__base description]);
    }
    - (NSString *)descriptionWithLocale:(id)locale {
        return([__base descriptionWithLocale:locale]);
    }
    - (NSString *)descriptionWithLocale:(id)locale indent:(NSUInteger)level {
        return([__base descriptionWithLocale:locale indent:level]);
    }
    - (BOOL)writeToFile:(NSString *)path atomically:(BOOL)flag {
        return([__base writeToFile:path atomically:flag]);
    }
    - (BOOL)writeToURL:(NSURL *)url atomically:(BOOL)flag {
        return([__base writeToURL:url atomically:flag]);
    }
    - (NSArray *)pathsMatchingExtensions:(NSArray *)filterTypes {
        return([__base pathsMatchingExtensions:filterTypes]);
    }
    - (void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context {
        [__base addObserver:observer forKeyPath:keyPath options:options context:context];
    }
    –(void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath {
        [__base removeObserver:observer forKeyPath:keyPath];
    }
    - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(void *)context {
        [__base removeObserver:observer forKeyPath:keyPath context:context];
    }
    - (void)removeObserver:(NSObject *)observer fromObjectsAtIndexes:(NSIndexSet*)indexes forKeyPath:(NSString *)keyPath context:(void *)context {
        [__base removeObserver:observer fromObjectsAtIndexes:indexes forKeyPath:keyPath context:context];
    }
    - (void)addObserver:(NSObject *)observer toObjectsAtIndexes:(NSIndexSet*)indexes forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context {
        [__base addObserver:observer toObjectsAtIndexes:indexes forKeyPath:keyPath options:options context:context];
    }
    - (void)removeObserver:(NSObject *)observer fromObjectsAtIndexes:(NSIndexSet*)indexes forKeyPath:(NSString *)keyPath {
        [__base removeObserver:observer fromObjectsAtIndexes:indexes forKeyPath:keyPath];
    }
    - (void)setValue:(id)value forKey:(NSString *)key {
        [__base setValue:value forKey:key];
    }
    –(id)valueForKey:(NSString*)key {
        return([__base valueForKey:key]);
    }









    -(id)init {
        if (!(self=[super init])) return(nil);
        __base=[[NSMutableArray set] retain];
        weakObjects=NO;
        return(self);
    }
    -(id)initWithCoder:(NSCoder*)coder {
        if (!(self=[super init])) return(nil);
        __base=[[NSMutableArray alloc] initWithCoder:coder];
        weakObjects=NO;
        return(self);
    }
    -(id)initWithZone:(NSZone*)zone {
        if (!(self=[super init])) return(nil);
        __base=[[NSMutableArray allocWithZone:zone] init];
        weakObjects=NO;
        return(self);
    }
    -(id)copyWithZone:(NSZone*)zone {
        return([[MutableArray allocWithZone:zone] initWithZone:zone]);
    }
    -(id)mutableCopyWithZone:(NSZone*)zone {
        return([[MutableArray allocWithZone:zone] initWithZone:zone]);
    }

    –(bool)addObject:(id)object {
        if ((![self containsObject:object])&&[self shouldAddObject:object]) {
            [__base addObject:object weak:weakObjects];
            return(YES);
        }
        else return(NO);
    }
    –(bool)removeObject:(id)object {
        if ([self containsObject:object]) {
            [self willRemoveObject:object];
            [__base removeObject:object];
            return(YES);
        }
        else return(NO);
    }
    –(void)removeAllObjects {
        for (id object in self) [self willRemoveObject:object];
        [__base removeAllObjects];
    }
    –(int)addObjectsFromArray:(NSArray*)array {
        int ret=0;
        for (id object in array) if ([self addObject:object]) ret++;
        return(ret);
    }
    –(int)unionSet:(NSSet*)set {
        int ret=0;
        for (id object in set) if ([self addObject:object]) ret++;
        return(ret);
    }
    –(int)minusSet:(NSSet*)set {
        int ret=0;
        for (id object in set) if ([self removeObject:object]) ret++;
        return(ret);
    }
    –(int)intersectSet:(NSSet*)set {
        int ret=0;
        for (id object in self) if ((![set containsObject:object])&&[self removeObject:object]) ret++;
        return(ret);
    }
    – setSet:(NSSet*)set {
        [self removeAllObjects];
        int ret=0;
        for (id object in set) if ([self addObject:object]) ret++;
        return(ret);
    }
    -(void)encodeWithCoder:(NSCoder*)coder {
        [__base encodeWithCoder:code];
    }
    - (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(id *)stackbuf count:(NSUInteger)len {
        NSUInteger ret=[__base countByEnumeratingWithState:state objects:stackbuf count:len];
        for (NSUInteger i=0;i<ret;i++) {
            stackbuf[i]=[WeakObject deref:stackbuf[i]];
        }
        return(ret);
    }
    +(MutableArray*)set {return([[[MutableArray alloc] init] autorelease]);}
    –(NSUInteger)count {return(__base.count);}
    –(NSArray*)allObjects {
        NSMutableArray *ret=[NSMutableArray arrayWithCapacity:__base.count];
        for (id object in self) [ret addObject:object];
        return(ret);
    }
    –(id)anyObject {
        return([WeakObject deref:[__base anyObject]]);
    }
    –(BOOL)containsObject:(id)object {
        return([__base containsObject:object]);
    }
    –(void)makeObjectsPerformSelector:(SEL)selector {
        for (id object in self) if ([object respondsToSelector:selector]) {
            [object performSelector:selector];
        }
    }
    –(void)makeObjectsPerformSelector:(SEL)selector withObject:obj {
        for (id object in self) if ([object respondsToSelector:selector]) {
            [object performSelector:selector withObject:obj];
        }
    }
    –(BOOL)member:(id)object {
        return([__base member:object]);
    }
    –(BOOL)isSubsetOfSet:(NSSet*)array {
        for (id object in self) if (![array containsObject:object]) return(NO);
        return(YES);
    }
    –(BOOL)intersectsSet:(NSSet*)array {
        for (id object in self) if ([array containsObject:object]) return(YES);
        return(NO);
    }
    –(BOOL)isEqualToSet:(NSSet*)array {
        return((set.count==self.count)&&[self isSubsetOfSet:set]);
    }
    –(NSString*)description {return(__base.description);}
    –(NSString*)descriptionWithLocale:(id)locale {
        return([__base.descriptionWithLocale:locale]);
    }










