
Singletons
    MetaRenderer metaRenderer={return(v_metaRenderer?v_metaRenderer:(v_metaRenderer=[[MetaRenderer alloc] init]));}=nil (dealloc,ivar)
    NSString description={
        [ret appendFormat:@"\nxMetaRenderer %p\n",self.metaRenderer];
    }




MetaRenderer <BaseObject> "fn:meta"
    UIWebView webView=[[UIWebView alloc] initWithFrame:CGRectMake(0,0,10,10)] (readonly,dealloc,ivar=webView)

    +(NSString*)jsStringForURL:(NSURL*)url {
        NSMutableDictionary *args=[ImageShader argStringDictionaryForURL:url];
        NSMutableString *ret=[NSMutableString stringWithString:@"(function(){"];
        for (NSString *k in args) {
            NSString *v=[args objectForKey:k];
            if ([k hasPrefix:@"u"]&&(k.length>=2)&&[v hasPrefix:@"U"]) {
                [ret appendFormat:@"var %@=%@;",[k substringFromIndex:1],[v substringFromIndex:1]];
            }
            else if ([k hasPrefix:@"m"]&&(k.length>=2)&&[v hasPrefix:@"S"]) {
                v=[[v substringFromIndex:1] stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];
                [ret appendFormat:@"function %@%@%@%@%@",
                    [k substringFromIndex:1],[k rangeOfString:@"("].location==NSNotFound?@"()":@"",
                    [v hasPrefix:@"{"]?@"":@"{",v,[v hasSuffix:@"}"]?@"":@"}"];
            }
        }
        [ret appendString:@"return(JSON.stringify(main()));})()"];
        return(ret);
    }

    -(NSObject*)objectByEvaluatingURL:(NSURL*)url {
        return[self objectByEvaluatingJS:[__Class__ jsStringForURL:url]];
    }

    -(NSObject*)objectByEvaluatingJS:(NSString*)js {
        if (!js) return(nil);
        @synchronized (self) {
            NSString *json=[webView stringByEvaluatingJavaScriptFromString:js];
            if (json) {
                NSObject *ret=[JsonParser unpackString:json];
                return(ret?ret:json);
            }
            else {
                [Log log:@"Failed to parse js:%s\n",js.UTF8String];
                return(nil);
            }
        }
    }



    






Singletons
    MetaRequestCache metaRequestCache={return(v_metaRequestCache?v_metaRequestCache:(v_metaRequestCache=[[MetaRequestCache alloc] init]));}=nil (dealloc,ivar)
    NSString description={
        [ret appendFormat:@"\nMetaRequestCache %p has %d in cache\n",self.metaRequestCache,self.metaRequestCache.cache.count];
    }

    NSRegularExpression MetaEnabled_szregex=nil (readonly,dealloc)
    NSRegularExpression MetaEnabled_rectregex=nil (readonly,dealloc)


    -(init) {
        {
            NSError *error=nil;
            v_MetaEnabled_szregex=[[NSRegularExpression regularExpressionWithPattern:@"usize=U(%3F)" options:0 error:&error] retain];
            if (error) ERR("Bad regex sz");
            error=nil;
            v_MetaEnabled_rectregex=[[NSRegularExpression regularExpressionWithPattern:@"uframe=U(%3F)" options:0 error:&error] retain];
            if (error) ERR("Bad regex rect");
        }
    }

    MutableDictionary metaEnabledURLRegistry={
        if (!metaEnabledURLRegistry) {
            metaEnabledURLRegistry=[[MutableDictionary alloc] init];
            [metaEnabledURLRegistry addDelegate:[[MetaEnabledURLRegistryDelegate alloc] init]];
        }
        return(metaEnabledURLRegistry);
        }=nil (ivar=metaEnabledURLRegistry,dealloc,publicreadonly)
    -(void)refreshMetaEnabledURLs {
        NSSet *s=self.urlMetaEnableds.urlMetaEnableds.copy;
        for (NSObject<MetaEnabled> *v in s) [v refreshMetaFromRegisteredURLs];
    }

    URLMetaEnableds urlMetaEnableds={
        if (!urlMetaEnableds) {
            urlMetaEnableds=[[URLMetaEnableds alloc] init];
        }
        return(urlMetaEnableds);
    }=nil (ivar=urlMetaEnableds,dealloc,publicreadonly)


    NSString description={
        [ret appendFormat:@"\nMetaEnabledRegistry %@\n",self.metaEnabledURLRegistry.allKeys.description];
        [ret appendFormat:@"\nURLMetaEnableds x %d : %@\n",self.urlMetaEnableds.urlMetaEnableds.count,self.urlMetaEnableds.urlMetaEnableds.description];
    }





StyleTicker
    -(void)setProp:(NSString*)prop toArgs:(NSDictionary*)args {
            if ([prop hasPrefix:@"meta-"]) {
                [g_singletons.metaEnabledURLRegistry setObject:url forKey:[prop substringFromIndex:@"meta-".length]];
            }
    }


MetaEnabledURLRegistryDelegate<MutableDictionaryDelegate,BaseObject>
    -(void)stateOK {
        [g_singletons refreshMetaEnabledURLs];
    }


URLMetaEnableds<BaseObject>

    
MetaRequestCache<BaseObject,RootCodable> "fn:meta"
    LRUCache cache=[[LRUCache alloc] init] (publicreadonly,dealloc,ivar=cache)

    NSDictionary asDictionary=
        {imret=cache.asDictionary;}
        -v{cache.asDictionary=v;}

    -(void)clearCache {
        [cache clear];
    }

    +(NSObject*)metaDataForURL:(NSURL*)url frame:(CGRect)framev {return([g_singletons.metaRequestCache metaDataForURL:url frame:framev]);}
    -(NSObject*)metaDataForURL:(NSURL*)url frame:(CGRect)framev {
        url=[__Class__ sizedURLForURL:url frame:framev];
        NSObject *ret=[cache derefedObjectForKey:url];
        if (!ret) {
            ret=[g_singletons.metaRenderer objectByEvaluatingURL:url];
            if (!ret) ret=[NSNull null];
            [cache setObject:[[LRUCacheItem alloc] initWithObject:ret size:1] forKey:url];
        }
        return([ret isKindOfClass:[NSNull class]]?nil:ret);
    }

    -(init) {
        self.documentsCodingFilename=@"metas.bin";
        @10 [self loadCodable];
    }


    +(CGRect)roundedRect:(CGRect)r {
        r.origin.x=round(r.origin.x);
        r.origin.y=round(r.origin.y);
        r.size.width=round(r.size.width);
        r.size.height=round(r.size.height);
        return(r);
    }

    +(NSURL*)sizedURLForURL:(NSURL*)url frame:(CGRect)framev {
        NSString *s=url.absoluteString;//[ShaderURLConversion simplifiedURLForURL:url].absoluteString;
        NSTextCheckingResult *match=[g_singletons.MetaEnabled_szregex firstMatchInString:s options:0 range:NSMakeRange(0, [s length])];
        CGRect r=[__Class__ roundedRect:framev];
        //if (torect) *torect=r;
        
        bool changed=NO;
        if (match) {
            s=[s stringByReplacingCharactersInRange:[match rangeAtIndex:1] withString:[NSString stringWithFormat:@"%%5B%d%%2C%d%%5D",int(r.size.width),int(r.size.height)]];
            changed=YES;
        }
        match=[g_singletons.MetaEnabled_rectregex firstMatchInString:s options:0 range:NSMakeRange(0, [s length])];
        if (match) {
            s=[s stringByReplacingCharactersInRange:[match rangeAtIndex:1] withString:[NSString stringWithFormat:@"%%5B%d%%2C%d%%2C%d%%2C%d%%5D",int(r.origin.x),int(r.origin.y),int(r.size.width),int(r.size.height)]];
            changed=YES;
        }
        if (changed) url=[NSURL URLWithString:s];
        return(url);
    }




















Meta_ProxyDictionaryDelegate<ProxyDictionaryDelegate,MutableDictionaryDelegateWithEqualsCheck> "basic_=>meta_"
<Meta_ProxiedDictionaryDelegate:ProxiedDictionaryDelegate> "basic_=>meta_"



JSMetaPropertyInState
    NSString js=nil (readonly,dealloc,ivar=js)
    NSString var=nil (readonly,dealloc,ivar=var)
    NSObject varDef=nil (readonly,dealloc,ivar=varDef)
    NSObject cachedValue=nil (readonly,dealloc,ivar=cachedValue)

    -(init[super init])initWithJs:(NSString*)ajs value:(NSObject*)avalue var:(NSString*)avar {
        js=[ajs retain];
        if (!js) cachedValue=[avalue retain];
        if (avar&&!(js||cachedValue)) {
            NSRange r=[avar rangeOfString:@"="];
            NSString *propName;
            NSObject *def;
            if (r.location==NSNotFound) {propName=avar;def=nil;}
            else {
                propName=[avar substringToIndex:r.location];
                def=[JsonParser unpackString:[avar substringFromIndex:r.location+r.length]];
            }
            var=[propName retain];
            varDef=[def retain];
        }
    }
    NSString currentjs={
        if (!js) return(nil);
        NSMutableString *rawjs=nil;
        for (NSString *var2 in self.property.varProps) {
            if ([(rawjs?rawjs:js) rangeOfString:var2].location!=NSNotFound) {
                if (!rawjs) rawjs=js.mutableCopy;
                NSObject *v=[self.property.dataRegistry valueForProperty:(NSString*)[self.property.varProps objectForKey:var2]];
                NSString *s=(v?v.description:(NSString*)[self.property.varDefs objectForKey:var2]);
                [rawjs replaceOccurrencesOfString:var2 withString:s options:0 range:NSMakeRange(0,rawjs.length)];
            }
        }
        return(rawjs?rawjs:js);
    }
    NSObject value={
        if (!cachedValue) cachedValue=[self.currentValue retain];
        return(cachedValue);
    }
    NSObject currentValue={
        if (js) {
            return([g_singletons.metaRenderer objectByEvaluatingJS:self.currentjs]);
        }
        else if (var) {
            NSObject *v=[self.property.dataRegistry valueForProperty:var];
            return(v?v:varDef);
        }
        else return(cachedValue);
    }

    -(bool)didChangeValueOfProperty:(NSString*)propertyNamev alias:(NSString*)alias from:(NSObject*)fromValue to:(NSObject*)toValue {
        if ([var isEqualToString:propertyNamev]) {
            cachedValue=nil;
            return(YES);
        }
        else if (js&&([js rangeOfString:alias].location!=NSNotFound)) {
            cachedValue=nil;
            return(YES);
        }
        else return(NO);
    }

        


JSMetaProperty<NamedDataListener>
    property ~d< JSMetaPropertyInState propertyInState
    jsproperty >d~ <MetaEnabled> owner

    NSArray stateOrder=nil (ivar=stateOrder,dealloc,readonly)
    
    NSMutableDictionary varProps=[[NSMutableDictionary alloc] init] (ivar=varProps,dealloc,readonly)
    NSMutableDictionary varDefs=[[NSMutableDictionary alloc] init] (ivar=varDefs,dealloc,readonly)

    NSString stateProp=nil (ivar=stateProp,readonly,dealloc)

    -(init[super init])initWithOwner:(NSObject<MetaEnabled>*)aowner name:(kid)name dictionary:(NSDictionary*)d {
        @100
        [aowner setJsproperty:self forKey:name];
        
        self.dataRegistry=aowner.dataRegistry;
        
        NSMutableSet *propNames=[[NSMutableSet alloc] init];

        NSString *statev=([[d objectForKey:@"~~"] isKindOfClass:[NSString class]]?(NSString*)[d objectForKey:@"~~"]:nil);
        for (NSString *key in d) {
            if ([key hasPrefix:@"js"]) {
                if ([[d objectForKey:key] isKindOfClass:[NSString class]]) {
                    JSMetaPropertyInState *ps=[[JSMetaPropertyInState alloc] initWithJs:(NSString*)[d objectForKey:key] value:nil var:nil];
                    if ([key isEqualToString:@"js"]) {
                        if (![self propertyInStateForKey:[NSNull null]]) {
                            [self.propertyInStates setObject:ps forKey:[NSNull null]];
                        }
                    }
                    else if ([key hasPrefix:@"js~"]) {
                        if (!statev) statev=@"app::state";
                        NSArray *ss=[key componentsSeparatedByString:@"~"];
                        int i=0;for (NSString *s in ss) if (i++) {
                            if (![self propertyInStateForKey:s]) {
                                [self.propertyInStates setObject:ps forKey:s];
                            }
                        }
                    }
                }
            }
            else if ([key hasPrefix:@"prop"]) {
                if ([[d objectForKey:key] isKindOfClass:[NSString class]]) {
                    JSMetaPropertyInState *ps=[[JSMetaPropertyInState alloc] initWithJs:nil value:nil var:(NSString*)[d objectForKey:key]];
                    [propNames addObject:ps.var];
                    if ([key isEqualToString:@"prop"]) {
                        if (![self propertyInStateForKey:[NSNull null]]) {
                            [self.propertyInStates setObject:ps forKey:[NSNull null]];
                        }
                    }
                    else if ([key hasPrefix:@"prop~"]) {
                        if (!statev) statev=@"app::state";
                        NSArray *ss=[key componentsSeparatedByString:@"~"];
                        int i=0;for (NSString *s in ss) if (i++) {
                            if (![self propertyInStateForKey:s]) {
                                [self.propertyInStates setObject:ps forKey:s];
                            }
                        }
                    }
                }
            }
            else if ([key hasPrefix:@"~"]&&![key isEqualToString:@"~~"]) {
                JSMetaPropertyInState *ps=[[JSMetaPropertyInState alloc] initWithJs:nil value:[d objectForKey:key] var:nil];
                if (!statev) statev=@"app::state";
                NSArray *ss=[key componentsSeparatedByString:@"~"];
                int i=0;for (NSString *s in ss) if (i++) {
                    if (![self propertyInStateForKey:s]) {
                        [self.propertyInStates setObject:ps forKey:s];
                    }
                }
            }
        }
        if (statev) {
            stateProp=[statev retain];
            [propNames addObject:statev];
        }
        NSDictionary *vars=([[d objectForKey:@"props"] isKindOfClass:[NSDictionary class]]?(NSDictionary*)[d objectForKey:@"props"]:nil);
        for (NSString *var in vars) if ([var isKindOfClass:[NSString class]]&&[[vars objectForKey:var] isKindOfClass:[NSString class]]) {
            NSString *v=[vars objectForKey:var];
            NSRange r=[v rangeOfString:@"="];
            NSString *propName,*def;
            if (r.location==NSNotFound) {propName=v;def=@"null";}
            else {
                propName=[v substringToIndex:r.location];
                def=[v substringFromIndex:r.location+r.length];
            }
            [varProps setObject:propName forKey:var];
            [varDefs setObject:def forKey:var];
            [propNames addObject:propName];
        }
        self.propertyNamesListenedTo=propNames;
        
        if (self.propertyInStates.count) {
            NSMutableArray *a=[[NSMutableArray alloc] init];
            for (NSString *stateName in self.propertyInStates) if ([stateName isKindOfClass:[NSString class]]) {
                int dots=0,chars=0,stars=0;
                for (int i=0;i<stateName.length;i++) {
                    unichar c=[stateName characterAtIndex:i];
                    if (c=='*') stars++;
                    else if (c=='.') dots++;
                    else chars++;
                }
                int i=0;
                for (NSString *s in a) {
                    int dots2=0,chars2=0,stars2=0;
                    for (int i=0;i<s.length;i++) {
                        unichar c=[s characterAtIndex:i];
                        if (c=='*') stars2++;
                        else if (c=='.') dots2++;
                        else chars2++;
                    }
                    if (stars2>stars) break;
                    if (chars2+dots2>chars+dots) break;
                    if ((chars2+dots2==chars+dots)&&(dots2>dots)) break;
                    i++;
                }
                [a insertObject:stateName atIndex:i];
            }
            stateOrder=a.copy;
        }
                    
    }

    +(bool)isJSProperty:(NSObject*)object {
        if (![object isKindOfClass:[NSDictionary class]]) return(NO);
        for (NSObject *k in (NSDictionary*)object) if ([k isKindOfClass:[NSString class]]) {
            NSString *key=(NSString*)k;
            if ([key isEqualToString:@"js"]||[key hasPrefix:@"js~"]) return(YES);
            if ([key isEqualToString:@"prop"]||[key hasPrefix:@"prop~"]) return(YES);
            if ([key hasPrefix:@"~"]) return(YES);
        }
        return(NO);
    }

    NSObject cachedValue=nil (readonly,dealloc,ivar=cachedValue)

    NSObject<NSCopying> state={
        if (!cachedState) cachedState=[self.currentState retain];
        return(cachedState);
    }
    NSObject value={
        if (!cachedValue) cachedValue=[self.currentValue retain];
        return(cachedValue);
    }
    NSObject<NSCopying> cachedState=nil (readonly,dealloc,ivar=cachedState)
    
    NSObject<NSCopying> currentState={
        NSObject *stateo=nil;
        if (stateProp) stateo=[self.dataRegistry valueForProperty:stateProp];
        
        if (!stateo) return([NSNull null]);
        
        if (![stateo isKindOfClass:[NSString class]]) return(nil);
        
        for (NSString *s in stateOrder) {
            if (([s rangeOfString:@"."].location!=NSNotFound)||([s rangeOfString:@"*"].location!=NSNotFound)) {
                NSString *res=[s stringByReplacingPairs:@"*",@".*",@"+",@"\\+",@"(",@"\\(",@")",@"\\)",@"[",@"\\[",@"]",@"\\]",@"{",@"\\{",@"}",@"\\}",@"?",@"\\?",@"$",@"\\$",@"^",@"\\^",@"!",@"\\!",nil];
                NSError *err=nil;
                NSRegularExpression *re=[NSRegularExpression regularExpressionWithPattern:res options:0 error:&err];
                if (re&&!err) {
                    NSTextCheckingResult *match=[re firstMatchInString:(NSString*)stateo options:0 range:NSMakeRange(0, [s length])];
                    if (match) return(s);
                }
            }
            else if ([s isEqualToString:(NSString*)stateo]) return(s);
        }
        return(nil);
    }
    
    NSObject currentValue={
        if (!self.state) return(nil);
        JSMetaPropertyInState *ms=[self.propertyInStates objectForKey:self.state];
        return(ms?ms.value:nil);
    }
    
    -(void)didChangeValueOfProperty:(NSString*)propertyNamev from:(NSObject*)fromValue to:(NSObject*)toValue {
        NSString *alias=@"??";
        for (NSString *alias2 in varProps) if ([propertyNamev isEqual:[varProps objectForKey:alias2]]) {alias=alias2;break;}
        
        bool changed=NO;
        if (!(fromValue?[toValue isEqual:fromValue]:!toValue)) {
            if ([stateProp isEqualToString:propertyNamev]) {
                NSObject<NSCopying> *v=self.currentState;
                if (!(v?[cachedState isEqual:v]:!cachedState)) {
                    changed=YES;
                    cachedState=v;
                }
            }
            JSMetaPropertyInState *ps0=[self.propertyInStates objectForKey:[NSNull null]];
            if ([ps0.var isEqualToString:propertyNamev]||ps0.js) {
                bool b=[ps0 didChangeValueOfProperty:propertyNamev alias:alias from:fromValue to:toValue];
                if (b&&[cachedState isKindOfClass:[NSNull class]]) {
                    changed=YES;
                }
            }
            if ([cachedState isKindOfClass:[NSString class]]) {
                for (NSObject *s in self.propertyInStates) if ([s isKindOfClass:[NSString class]]) {
                    JSMetaPropertyInState *ps=[self.propertyInStates objectForKey:(NSString*)s];
                    if (ps) {
                        bool b=[ps didChangeValueOfProperty:propertyNamev alias:alias from:fromValue to:toValue];
                        if (b&&[(NSString*)s isEqualToString:(NSString*)cachedState]) {
                            changed=YES;
                        }
                    }
                }
            }
        }
        if (changed) {
            NSObject *v=self.currentValue;
            if (!(v?[cachedValue isEqual:v]:!cachedValue)) {
                cachedValue=[v retain];
                //prnt("JS prop: %s\n= %s\n",((NSString*)self.keyInOwner).UTF8String,
                //cachedValue.description.UTF8String
                //);
                [self.owner didChangeValueOfJSProperty:(NSObject<NSCopying>*)self.keyInOwner];
            }
        }
    }
    -(void)namedDataStateOK {[self.owner jsPropertyStateOK];}

        


<MetaEnabled:Meta_ProxiedDictionaryDelegate,HasProperties,NamedDataListener>

    parentMeta ~d< <MetaEnabled> childMeta

    bool isMutable={return(YES);}

    DataRegistry myDataRegistry=
        {return(myDataRegistry);}
        -v{
            if (v!=myDataRegistry) {
                myDataRegistry=[v retain];
                self.dataRegistry=v;
            }
        }=nil (ivar=myDataRegistry,dealloc)
            
    -(void)setDataRegistry:(DataRegistry*)v {
        @-100 DataRegistry *regWas=dataRegistry;
        self.myDataRegistry=v;
        v=self.nearestRegistry;
        @100
        if (regWas!=dataRegistry) {
            for (kid key in self.childMetas) {
                NSObject<MetaEnabled> *child=[self childMetaForKey:key];
                if (child.myDataRegistry.parent==regWas) {
                    child.myDataRegistry.parent=dataRegistry;
                }
                child.dataRegistry=child.myDataRegistry;
            }
        }
    }
    
    DataRegistry nearestRegistry={
        NSObject<MetaEnabled> *v=self;
        while (v&&!v.myDataRegistry) v=v.parentMeta;
        return(v.myDataRegistry);
    }

    <DataModelViewer> nearestViewer={
        NSObject<MetaEnabled> *v=self;
        while (v&&![v conformsToProtocol:@protocol(DataModelViewer)]) v=v.parentMeta;
        return((NSObject<DataModelViewer>*)v);
    }
    

    NSDictionary metaPropertiesToInitWith=nil (readonly,ivar=metaPropertiesToInitWith)
    NSObject<MetaEnabled> parentForInit=nil (readonly,ivar=parentForInit)
    kid keyInParentToInitWith=nil (readonly)

    MutableDictionary _metaProperties=[[MutableDictionary alloc] init] (dealloc,ivar=_metaProperties)
    NSDictionary metaProperties=
        {return(_metaProperties.__dictionary);}
        -v{
            [_metaProperties setDictionary:v];
        }

    -(init) {
        @-400 if (parentForInit) [parentForInit.childMetas setObject:self forKey:keyInParentToInitWith];
        @-100 [self meta_attachDictionaryDelegateTo:_metaProperties];
        @400 if ([self conformsToProtocol:@protocol(MetaComponent)]) {
            NSString *key=[(NSObject<MetaComponentClass>*)[self class] metaURLKey];
            if (key) {
                if (metaPropertiesToInitWith) {
                    NSMutableDictionary *d=metaPropertiesToInitWith.mutableCopy;
                    [d setObject:key forKey:@"urlkey"];
                    metaPropertiesToInitWith=d;
                }
                else metaPropertiesToInitWith=[NSDictionary dictionaryWithObjectsAndKeys:
                    key,@"urlkey",
                    nil];
            }
        }
        @500 if (metaPropertiesToInitWith) {
            self.metaProperties=metaPropertiesToInitWith;
            metaPropertiesToInitWith=nil;
        }
        @600 [self refreshMetaFromRegisteredURLs];
    }

    -(id)superInit {return([super init]);}
    +(id)metaInitSelf:(id)aself withMeta:(NSDictionary*)metaProps {
        return([(__Class__*)aself superInit]);
    }

    -(void)metaEnabledPartialInitWithMeta:(NSDictionary*)metaProps parent:(NSObject<MetaEnabled>*)aparent key:(id<NSCopying>)keyInParent {
        parentForInit=aparent;
        keyInParentToInitWith=keyInParent;
        metaPropertiesToInitWith=metaProps;
        metaURLWas=[[metaProps objectForKey:@"metaurl"] retain];
        frameWas=CGRectMake(0,0,1,1);
        {
            NSObject *object=[metaProps objectForKey:@"frame"];
            if ([object isKindOfClass:[NSArray class]]&&(((NSArray*)object).count==4)) {
                NSArray *a=(NSArray*)object;
                if (
                [[a objectAtIndex:0] isKindOfClass:[NSNumber class]]&&
                [[a objectAtIndex:1] isKindOfClass:[NSNumber class]]&&
                [[a objectAtIndex:2] isKindOfClass:[NSNumber class]]&&
                [[a objectAtIndex:3] isKindOfClass:[NSNumber class]]) {
                    frameWas=CGRectMake(
                        ((NSNumber*)[a objectAtIndex:0]).floatValue,
                        ((NSNumber*)[a objectAtIndex:1]).floatValue,
                        ((NSNumber*)[a objectAtIndex:2]).floatValue,
                        ((NSNumber*)[a objectAtIndex:3]).floatValue
                    );
                }
            }
        }
    }

    -(id)initWithMeta:(NSDictionary*)metaProps parent:(NSObject<MetaEnabled>*)aparent key:(id<NSCopying>)keyInParent {@-10001
        if (!(self=[__Class__ metaInitSelf:self withMeta:metaProps])) return(nil);
        @0 [self metaEnabledPartialInitWithMeta:metaProps parent:aparent key:keyInParent];
        @11 [self _startObjectOfClass__WIClass__];
        @10001 return(self);
    }

    bool debug=NO
    -(init) {@-10 if (debug) [self attachPropertyDebuggers];}

    NSMutableSet changedMetaKeys=[[NSMutableSet alloc] init] (ivar=changedMetaKeys,dealloc,readonly)

    -(void)meta_didReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying>)key {@-600
        if (toObject) [changedMetaKeys addObject:key];
    }

    -(void)meta_willReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying>)key {@-600
        if (fromObject) [changedMetaKeys addObject:key];
    }

    -(void)meta_stateOK {@-500
        for (NSObject<NSCopying> *_key in changedMetaKeys) {
            NSObject<NSCopying> *key=_key;
            NSObject *object=[self._metaProperties objectForKey:key];
            @-400
            
            JSMetaProperty *jsp=nil;
            if ([JSMetaProperty isJSProperty:object]) {
                jsp=[[JSMetaProperty alloc] initWithOwner:self name:key dictionary:(NSDictionary*)object];
            }
            else [self.jspropertys removeObjectForKey:key];


            @100
            [self didSetMetaProperty:object forKey:key];
        }
        @300
        [changedMetaKeys removeAllObjects];
    }

    -(void)dealloc {@-200 [self._metaProperties removeAllObjects];}

    -(void)didSetMetaProperty:(NSObject*)object forKey:(NSObject<NSCopying>*)key {
        @-300
        JSMetaProperty *jsp=[self jspropertyForKey:key];
        @-290
        if (jsp) object=jsp.currentValue;
        @-270
        {
            NSObject<MetaEnabled> *child=[self childMetaForKey:key];
            
            NSString *keyStr=([key isKindOfClass:[NSString class]]?(NSString*)key:nil);
            NSDictionary *objectDictionary=([object isKindOfClass:[NSDictionary class]]?(NSDictionary*)object:nil);
            
            if (objectDictionary&&keyStr&&
                [[objectDictionary objectForKey:@"type"] isKindOfClass:[NSString class]]) {
                NSDictionary *childMetaProps=objectDictionary;
                if ([[objectDictionary objectForKey:@"urlkey"] isKindOfClass:[NSString class]]) {
                    NSString *urlkey=(NSString*)[objectDictionary objectForKey:@"urlkey"];
                    
                    NSMutableDictionary *mmetaProps=[NSMutableDictionary dictionary];
                    NSObject *o=[g_singletons.metaEnabledURLRegistry objectForKey:urlkey];
                    if ([o isKindOfClass:[NSURL class]]) {
                        NSURL *url=(NSURL*)o;
                        CGRect framev=CGRectMake(0,0,1,1);
                        NSObject *frameo=[objectDictionary objectForKey:@"frame"];
                        if ([frameo isKindOfClass:[NSArray class]]&&(((NSArray*)frameo).count==4)) {
                            NSArray *framea=(NSArray*)frameo;
                            if (
                            [[framea objectAtIndex:0] isKindOfClass:[NSNumber class]]&&
                            [[framea objectAtIndex:1] isKindOfClass:[NSNumber class]]&&
                            [[framea objectAtIndex:2] isKindOfClass:[NSNumber class]]&&
                            [[framea objectAtIndex:3] isKindOfClass:[NSNumber class]]) {
                                framev=CGRectMake(
                                    ((NSNumber*)[framea objectAtIndex:0]).floatValue,
                                    ((NSNumber*)[framea objectAtIndex:1]).floatValue,
                                    ((NSNumber*)[framea objectAtIndex:2]).floatValue,
                                    ((NSNumber*)[framea objectAtIndex:3]).floatValue
                                );
                            }
                        }
                        NSObject *metaDict=[MetaRequestCache metaDataForURL:url frame:framev];
                        if ([metaDict isKindOfClass:[NSDictionary class]]) {
                            [mmetaProps addEntriesFromDictionary:(NSDictionary*)metaDict];
                        }
                        else {
                            NSURL *url2=[MetaRequestCache sizedURLForURL:url frame:framev];
                            [Log log:@"Failed to get a meta dictionary from js:\n%@\n",[MetaRenderer jsStringForURL:url2]];
                        }
                        [mmetaProps setObject:url forKey:@"metaurl"];
                    }
                    [mmetaProps setObject:[objectDictionary objectForKey:@"type"] forKey:@"type"];
                    [mmetaProps setObject:[objectDictionary objectForKey:@"urlkey"] forKey:@"urlkey"];
                    if ([objectDictionary objectForKey:@"frame"]) {
                        [mmetaProps setObject:[objectDictionary objectForKey:@"frame"] forKey:@"frame"];
                    }
                    childMetaProps=mmetaProps;
                }

                if (child) child.metaProperties=childMetaProps;
                else if ([[self allowedMetaChildTypes] containsObject:[childMetaProps objectForKey:@"type"]]) {
                    child=[MetaEnabled doallocMetaEnabledOfType:(NSString*)[childMetaProps objectForKey:@"type"]];
                    if (child) child=[child initWithMeta:childMetaProps parent:self key:key];
                    if (child) {
                        [self didAttachChild:child withName:(NSString*)key];
                    }
                }
                child=nil;
            }
            if (child) {
                if ([key isKindOfClass:[NSString class]]) {
                    [self willDettachChild:child withName:(NSString*)key];
                }
                [child._metaProperties removeAllObjects];
                [self.childMetas removeObjectForKey:key];
            }
        }
        
        @-100
        NSString *keyStr=([key isKindOfClass:[NSString class]]?(NSString*)key:nil);
        NSString *objectStr=([object isKindOfClass:[NSString class]]?(NSString*)object:nil);
        NSNumber *objectNumber=([object isKindOfClass:[NSNumber class]]?(NSNumber*)object:nil);
        NSDictionary *objectDictionary=([object isKindOfClass:[NSDictionary class]]?(NSDictionary*)object:nil);
        NSArray *objectArray=([object isKindOfClass:[NSArray class]]?(NSArray*)object:nil);
        bool allNum=NO;
        if (objectArray) {
            allNum=YES;
            for (NSObject *o in objectArray) if (![o isKindOfClass:[NSNumber class]]) {
                allNum=NO;
                break;
            }
        }
        keyStr=keyStr;
        objectStr=objectStr;
        objectNumber=objectNumber;
        objectDictionary=objectDictionary;
        objectArray=objectArray;
        allNum=allNum;
        
        @0
        if ([keyStr isEqualToString:@"debugproperties"]) {
            if (objectNumber.boolValue) {
                if (!debug) {
                    debug=YES;
                    [self attachPropertyDebuggers];
                }
            }
            else if (debug) {
                debug=NO;
                [self dettachPropertyDebuggers];
            }
        }
        
    }
    
    


    -(void)didChangeValueOfJSProperty:(NSObject<NSCopying>*)key {
        [self didSetMetaProperty:nil forKey:key];
    }

    -(void)jsPropertyStateOK {
        [self meta_stateOK];
    }
    


    urlMetaEnabled >s- URLMetaEnableds urlMetaEnableds

    NSURL metaURLWas=nil (readonly,dealloc,ivar=metaURLWas)
    CGRect frameWas=nil (readonly)

    -(void)refreshMetaFromRegisteredURLs {
        NSDictionary *metaProps=self.metaProperties;
        if ([[metaProps objectForKey:@"urlkey"] isKindOfClass:[NSString class]]) {
            self.urlMetaEnableds=g_singletons.urlMetaEnableds;
            NSMutableDictionary *mmetaProps=[NSMutableDictionary dictionary];
            NSObject *o=[g_singletons.metaEnabledURLRegistry objectForKey:[metaProps objectForKey:@"urlkey"]];
            if ([o isKindOfClass:[NSURL class]]) {
                NSURL *url=(NSURL*)o;
                CGRect framev=self.frame;
                if ([metaURLWas.absoluteString isEqualToString:url.absoluteString]&&
                    (fabs(framev.origin.x-frameWas.origin.x)<1)&&
                    (fabs(framev.origin.y-frameWas.origin.y)<1)&&
                    (fabs(framev.size.width-frameWas.size.width)<1)&&
                    (fabs(framev.size.height-frameWas.size.height)<1)) return;
                frameWas=framev;
                metaURLWas=[url retain];
                NSObject *metaDict=[MetaRequestCache metaDataForURL:url frame:framev];
                if ([metaDict isKindOfClass:[NSDictionary class]]) {
                    [mmetaProps addEntriesFromDictionary:(NSDictionary*)metaDict];
                }
                else {
                    NSURL *url2=[MetaRequestCache sizedURLForURL:url frame:framev];
                    [Log log:@"Failed(2) to get a meta dictionary from js:\n%@\n",[MetaRenderer jsStringForURL:url2]];
                }

            }
            if ([metaProps objectForKey:@"type"]) {
                [mmetaProps setObject:[metaProps objectForKey:@"type"] forKey:@"type"];
            }
            [mmetaProps setObject:[metaProps objectForKey:@"urlkey"] forKey:@"urlkey"];
            if ([metaProps objectForKey:@"frame"]) {
                [mmetaProps setObject:[metaProps objectForKey:@"frame"] forKey:@"frame"];
            }
            self.metaProperties=mmetaProps;
        }
        else self.urlMetaEnableds=nil;
    }


    -(NSSet*)allowedMetaChildTypes {@-10 return([NSSet setWithObjects:@10 nil]);}
    -(void)didAttachChild:(NSObject<MetaEnabled>*)child withName:(NSString*)name {
        @-10{child.parent=self;}
    }
    -(void)willDettachChild:(NSObject<MetaEnabled>*)child withName:(NSString*)name {
        @-10{if (child.parent==self) child.parent=nil;}
    }

MetaEnabled
    +(NSObject<MetaEnabled>*)doallocMetaEnabledOfType:(NSString*)type {@999 return(nil);}

    +(void)addSubview:(id)childView withName:(NSString*)name parentView:(UIView*)parentView {
        if ([childView isKindOfClass:[UIView class]]) {
            NSArray *chs=parentView.subviews;
            NSUInteger insertAt=0;
            for (UIView *v in chs) {
                if ([v conformsToProtocol:@protocol(MetaEnabled)]) {
                    NSString *vName=(NSString*)((id<MetaEnabled>)v).keyInParentMeta;
                    if ([vName compare:name]!=NSOrderedAscending) break;
                }
                insertAt++;
            }
            [parentView insertSubview:(UIView*)childView atIndex:insertAt];
        }
    }

































<UIViewMetaEnabled:MetaEnabled,EssentialBaseView>
    -(void)layoutSubviews {
        [self refreshMetaFromRegisteredURLs];
    }
    bool transformChanged=nil
    -(void)didSetMetaProperty:(NSObject*)object forKey:(NSObject<NSCopying>*)key {
        if ([keyStr isEqualToString:@"frame"]&&allNum&&(objectArray.count==4)) {
            CGRect framev=CGRectMake(
                ((NSNumber*)[objectArray objectAtIndex:0]).floatValue,
                ((NSNumber*)[objectArray objectAtIndex:1]).floatValue,
                ((NSNumber*)[objectArray objectAtIndex:2]).floatValue,
                ((NSNumber*)[objectArray objectAtIndex:3]).floatValue
            );
            if (!((fabs(framev.origin.x-frameWas.origin.x)<1)&&
                (fabs(framev.origin.y-frameWas.origin.y)<1)&&
                (fabs(framev.size.width-frameWas.size.width)<1)&&
                (fabs(framev.size.height-frameWas.size.height)<1))) {
                self.frame=frameWas=framev;
            }
        }
        if ([keyStr isEqualToString:@"bgcol"]) {
            UIColor *col=(objectStr?[Styler colorFromString:objectStr]:[UIColor clearColor]);
            self.backgroundColor=(col?col:[UIColor clearColor]);
        }
        if ([keyStr isEqualToString:@"hidden"]) {
            self.hidden=(objectNumber?objectNumber.boolValue:NO);
        }
        if ([keyStr isEqualToString:@"alpha"]) {
            self.alpha=(objectNumber?objectNumber.floatValue:1.0f);
        }
        if ([keyStr isEqualToString:@"opaque"]) {
            self.opaque=(objectNumber?objectNumber.boolValue:NO);
        }
        if ([keyStr isEqualToString:@"clips"]) {
            self.clipsToBounds=(objectNumber?objectNumber.boolValue:NO);
        }
        if ([keyStr isEqualToString:@"clearsContextBeforeDrawing"]) {
            self.clearsContextBeforeDrawing=(objectNumber?objectNumber.boolValue:NO);
        }
        if ([keyStr isEqualToString:@"enabled"]) {
            self.userInteractionEnabled=(objectNumber?objectNumber.boolValue:YES);
        }
        if ([keyStr isEqualToString:@"multipleTouch"]) {
            self.multipleTouchEnabled=(objectNumber?objectNumber.boolValue:YES);
        }
        if ([keyStr isEqualToString:@"exclusiveTouch"]) {
            self.exclusiveTouch=(objectNumber?objectNumber.boolValue:NO);
        }
        if ([keyStr isEqualToString:@"scale"]||[keyStr isEqualToString:@"rotate"]||[keyStr isEqualToString:@"translate"]||[keyStr isEqualToString:@"pretranslate"]||[keyStr isEqualToString:@"transform"]) {
            CATransform3D t=CATransform3DIdentity;
            
            NSObject *o=[self._metaProperties objectForKey:@"transform"];
            if (o&&[o isKindOfClass:[NSArray class]]&&(((NSArray*)o).count==16)) {
                bool allNum=YES;
                for (NSObject *oo in (NSArray*)o) if (![oo isKindOfClass:[NSNumber class]]) {
                    allNum=NO;
                    break;
                }
                if (allNum) {
                    int i=0;
                    for (NSObject *oo in (NSArray*)o) {
                        ((CGFloat*)&t.m11)[i++]=((NSNumber*)oo).floatValue;
                    }
                }
            }
            
            o=[self._metaProperties objectForKey:@"pretranslate"];
            if (o&&[o isKindOfClass:[NSArray class]]&&(((NSArray*)o).count==3)) {
                NSObject *tx=[(NSArray*)o objectAtIndex:0],*ty=[(NSArray*)o objectAtIndex:1],*tz=[(NSArray*)o objectAtIndex:2];
                if ([tx isKindOfClass:[NSNumber class]]&&[ty isKindOfClass:[NSNumber class]]&&[tz isKindOfClass:[NSNumber class]]) t=CATransform3DTranslate(t,((NSNumber*)tx).floatValue,((NSNumber*)ty).floatValue,((NSNumber*)tz).floatValue);
            }
            
            o=[self._metaProperties objectForKey:@"scale"];
            if (o&&[o isKindOfClass:[NSNumber class]]) {
                t=CATransform3DScale(t,((NSNumber*)o).floatValue,((NSNumber*)o).floatValue,((NSNumber*)o).floatValue);
            }
            if (o&&[o isKindOfClass:[NSArray class]]&&(((NSArray*)o).count==2)) {
                NSObject *tx=[(NSArray*)o objectAtIndex:0],*ty=[(NSArray*)o objectAtIndex:1];
                if ([tx isKindOfClass:[NSNumber class]]&&[ty isKindOfClass:[NSNumber class]]) t=CATransform3DScale(t,((NSNumber*)tx).floatValue,((NSNumber*)ty).floatValue,1);
            }
            if (o&&[o isKindOfClass:[NSArray class]]&&(((NSArray*)o).count==3)) {
                NSObject *tx=[(NSArray*)o objectAtIndex:0],*ty=[(NSArray*)o objectAtIndex:1],*tz=[(NSArray*)o objectAtIndex:2];
                if ([tx isKindOfClass:[NSNumber class]]&&[ty isKindOfClass:[NSNumber class]]&&[tz isKindOfClass:[NSNumber class]]) t=CATransform3DScale(t,((NSNumber*)tx).floatValue,((NSNumber*)ty).floatValue,((NSNumber*)tz).floatValue);
            }

            
            o=[self._metaProperties objectForKey:@"rotate"];
            if (o&&[o isKindOfClass:[NSNumber class]]) {
                t=CATransform3DRotate(t,((NSNumber*)o).floatValue,0,0,1);
            }
            if (o&&[o isKindOfClass:[NSArray class]]&&(((NSArray*)o).count==4)) {
                NSObject *ta=[(NSArray*)o objectAtIndex:0],*tx=[(NSArray*)o objectAtIndex:1],*ty=[(NSArray*)o objectAtIndex:2],*tz=[(NSArray*)o objectAtIndex:3];
                if ([ta isKindOfClass:[NSNumber class]]&&[tx isKindOfClass:[NSNumber class]]&&[ty isKindOfClass:[NSNumber class]]&&[tz isKindOfClass:[NSNumber class]]) t=CATransform3DRotate(t,((NSNumber*)ta).floatValue,((NSNumber*)tx).floatValue,((NSNumber*)ty).floatValue,((NSNumber*)tz).floatValue);
            }

            o=[self._metaProperties objectForKey:@"translate"];
            if (o&&[o isKindOfClass:[NSArray class]]&&(((NSArray*)o).count==3)) {
                NSObject *tx=[(NSArray*)o objectAtIndex:0],*ty=[(NSArray*)o objectAtIndex:1],*tz=[(NSArray*)o objectAtIndex:2];
                if ([tx isKindOfClass:[NSNumber class]]&&[ty isKindOfClass:[NSNumber class]]&&[tz isKindOfClass:[NSNumber class]]) t=CATransform3DTranslate(t,((NSNumber*)tx).floatValue,((NSNumber*)ty).floatValue,((NSNumber*)tz).floatValue);
            }
            
            CATransform3D twas=self.layer.transform;
            if (memcmp(&t,&twas,sizeof(t))) self.layer.transform=t;
        }
        if ([keyStr isEqualToString:@"permissivegestures"]) {
            permissiveGestures=objectNumber.boolValue;
        }
        if ([keyStr isEqualToString:@"tap"]) {
            self.tap1Selector=objectStr;
            if (objectStr) {
                if (!self.tap1GestureRecognizer) {
                    self.tap1GestureRecognizer=[[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(tapped1)];
                    [self.tap1GestureRecognizer setNumberOfTapsRequired:1];
                    [self.tap1GestureRecognizer setNumberOfTouchesRequired:1];
                    [self addGestureRecognizer:self.tap1GestureRecognizer];
                }
            }
            else if (self.tap1GestureRecognizer) {
                self.tap1GestureRecognizer=nil;
            }
        }
    }

    UITapGestureRecognizer tap1GestureRecognizer=nil
    NSString tap1Selector=nil
    -(void)tapped1 {
        [self callNamedSelector:self.tap1Selector];
    }


    -(void)callNamedSelector:(NSString*)selStr {
        if (selStr) {
            NSString *viewerKey=[DataRegistry viewerKeyOrNilFromProperty:selStr];
            selStr=[DataRegistry propertyKeyFromProperty:selStr];
            SEL sel=NSSelectorFromString(selStr);
            if (!viewerKey) {
                if ([self respondsToSelector:sel]) [self performSelector:sel];
                else {
                    NSObject<DataModelViewer> *v=self.nearestViewer;
                    if (v) {
                        if ([v respondsToSelector:sel]) [v performSelector:sel];
                        else if ([v.dataModel respondsToSelector:sel]) [v.dataModel performSelector:sel];
                    }
                }
            }
            else {
                NSObject<DataModelViewer> *v=[self.dataRegistry.allViewers objectForKey:viewerKey];
                if (v) {
                    if ([v respondsToSelector:sel]) [v performSelector:sel];
                    else if ([v.dataModel respondsToSelector:sel]) [v.dataModel performSelector:sel];
                }
            }
        }
    }
    
    -(void)didAttachChild:(NSObject<MetaEnabled>*)child withName:(NSString*)name {
        if ([child isKindOfClass:[UIView class]]) [MetaEnabled addSubview:(UIView*)child withName:name parentView:self];
    }
    -(void)willDettachChild:(NSObject<MetaEnabled>*)child withName:(NSString*)name {
        if ([child isKindOfClass:[UIView class]]) [(UIView*)child removeFromSuperview];
    }

    bool permissiveGestures=nil
    -(BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer *)otherGestureRecognizer {
        return(permissiveGestures);
    }


<UILabelViewMetaEnabled:UIViewMetaEnabled>
    NSString defaultText=@"A label"

    -(init) {@-490 self.text=self.defaultText;self.backgroundColor=[UIColor clearColor];}

    -(void)didSetMetaProperty:(NSObject*)object forKey:(NSObject<NSCopying>*)key {
        if ([keyStr isEqualToString:@"text"]) {
            self.text=(objectStr?objectStr:self.defaultText);
        }
        if ([keyStr isEqualToString:@"defaulttext"]) {
            self.defaultText=(objectStr?objectStr:@"A label");
            if (![self._metaProperties objectForKey:@"text"]) self.text=self.defaultText;
        }
        if ([keyStr isEqualToString:@"font"]||[keyStr isEqualToString:@"fontsize"]) {
            NSString *font=[self._metaProperties objectForKey:@"font"];
            if (![font isKindOfClass:[NSString class]]) font=@"Helvetica neue";
            NSNumber *sz=[self._metaProperties objectForKey:@"fontsize"];
            if (!([sz isKindOfClass:[NSNumber class]]&&(sz.floatValue>0))) sz=[NSNumber numberWithFloat:16];
            self.font=[UIFont fontWithName:[g_singletons.fontList fontNameMatchingPattern:font] size:sz.floatValue];
        }
        if ([keyStr isEqualToString:@"fontcol"]) {
            UIColor *col=(objectStr?[Styler colorFromString:objectStr]:[UIColor blackColor]);
            self.textColor=col;
            self.highlightedTextColor=col;
        }
        if ([keyStr isEqualToString:@"shadowcol"]&&objectStr) {
            UIColor *col=(objectStr?[Styler colorFromString:objectStr]:[UIColor clearColor]);
            self.shadowColor=col;
        }
        if ([keyStr isEqualToString:@"align"]) {
            if ([objectStr isEqualToString:@"centre"]||[objectStr isEqualToString:@"center"]) self.textAlignment=NSTextAlignmentCenter;
            else if ([objectStr isEqualToString:@"right"]) self.textAlignment=NSTextAlignmentRight;
            else self.textAlignment=NSTextAlignmentLeft;
        }
        if ([keyStr isEqualToString:@"linebreak"]) {
            if ([objectStr isEqualToString:@"charwrap"]) self.lineBreakMode=NSLineBreakByCharWrapping;
            else if ([objectStr isEqualToString:@"clip"]) self.lineBreakMode=NSLineBreakByClipping;
            else if ([objectStr isEqualToString:@"truncatehead"]) self.lineBreakMode=NSLineBreakByTruncatingHead;
            else if ([objectStr isEqualToString:@"truncatetail"]) self.lineBreakMode=NSLineBreakByTruncatingTail;
            else if ([objectStr isEqualToString:@"truncatemiddle"]) self.lineBreakMode=NSLineBreakByTruncatingMiddle;
            else self.lineBreakMode=NSLineBreakByWordWrapping;
        }
        if ([keyStr isEqualToString:@"minscalefactor"]) {
            float v=(objectNumber&&(objectNumber.floatValue>0)&&(objectNumber.floatValue<=1)?objectNumber.floatValue:0.5);
            self.adjustsFontSizeToFitWidth=(v<0.999);
            self.minimumScaleFactor=v;
        }
        if ([keyStr isEqualToString:@"baselineadjustment"]) {
            if ([objectStr isEqualToString:@"none"]) self.baselineAdjustment=UIBaselineAdjustmentNone;
            else if ([objectStr isEqualToString:@"centres"]||[objectStr isEqualToString:@"centers"]) self.baselineAdjustment=UIBaselineAdjustmentAlignCenters;
            else self.baselineAdjustment=UIBaselineAdjustmentAlignBaselines;
        }
        if ([keyStr isEqualToString:@"numlines"]) {
            self.numberOfLines=(objectNumber&&(objectNumber.floatValue>0)?(int)round(objectNumber.floatValue):1);
        }
        if ([keyStr isEqualToString:@"highlighted"]) {
            self.highlighted=(objectNumber?objectNumber.boolValue:NO);
        }
        if ([keyStr isEqualToString:@"shadowoffset"]) {
            if (allNum&&(objectArray.count==2)) {
                NSNumber *x=[objectArray objectAtIndex:0];
                NSNumber *y=[objectArray objectAtIndex:1];
                self.shadowOffset=CGSizeMake(x.floatValue,y.floatValue);
            }
            else self.shadowOffset=CGSizeMake(1,1);
        }
    }







UISliderMetaEnabled:UISlider<UISliderMetaEnabled>
    -(NSSet*)allowedMetaChildTypes {@"Rend",}
    -(init[super initWithFrame:CGRectMake(0,0,1,1)])init {}
    -(init)initWithFrame:(CGRect)framev {}
    -(id)superInitWithFrame:(CGRect)framev {return([super initWithFrame:framev]);}
    +(id)metaInitSelf:(id)aself withMeta:(NSDictionary*)metaProps {@!0
        return([aself superInitWithFrame:[MetaEnabled frameFromMeta:metaProps]]);
    }



<UISliderMetaEnabled:UIViewMetaEnabled,URLImageViewListener>
    -(void)didSetMetaProperty:(NSObject*)object forKey:(NSObject<NSCopying>*)key {
        if ([keyStr isEqualToString:@"value"]) {
            self.value=(objectNumber?fmax(self.minimumValue,fmin(self.maximumValue,objectNumber.floatValue)):self.minimumValue);
        }
        if ([keyStr isEqualToString:@"min"]) {
            float mn=(objectNumber?objectNumber.floatValue:0);
            self.maximumValue=fmax(self.maximumValue,mn);
            self.minimumValue=mn;
            NSNumber *vo=[self._metaProperties objectForKey:@"value"];
            if (![vo isKindOfClass:[NSNumber class]]) vo=nil;
            self.value=(vo?fmax(self.minimumValue,fmin(self.maximumValue,vo.floatValue)):self.minimumValue);
        }
        if ([keyStr isEqualToString:@"max"]) {
            float mx=(objectNumber?objectNumber.floatValue:1);
            self.minimumValue=fmin(self.minimumValue,mx);
            self.maximumValue=mx;
            NSNumber *vo=[self._metaProperties objectForKey:@"value"];
            if (![vo isKindOfClass:[NSNumber class]]) vo=nil;
            self.value=(vo?fmax(self.minimumValue,fmin(self.maximumValue,vo.floatValue)):self.minimumValue);
        }
        if ([keyStr isEqualToString:@"continuous"]) {
            self.continuous=(objectNumber?objectNumber.boolValue:YES);
        }
        if ([keyStr isEqualToString:@"mincol"]) {
            UIColor *col=(objectStr?[Styler colorFromString:objectStr]:[UIColor whiteColor]);
            if (col) self.minimumTrackTintColor=col;
        }
        if ([keyStr isEqualToString:@"maxcol"]) {
            UIColor *col=(objectStr?[Styler colorFromString:objectStr]:[UIColor whiteColor]);
            if (col) self.maximumTrackTintColor=col;
        }
        if ([keyStr isEqualToString:@"thumbcol"]) {
            UIColor *col=(objectStr?[Styler colorFromString:objectStr]:[UIColor whiteColor]);
            if (col) self.thumbTintColor=col;
        }
    }
    -(void)didAttachChild:(NSObject<MetaEnabled>*)child withName:(NSString*)name {@10
        if (([name isEqualToString:@"max"]||[name isEqualToString:@"min"]||[name isEqualToString:@"thumb"])&&[child isKindOfClass:[RenderView class]]) {
            [self.listenToImageViews addObject:(RenderView*)child];
            [self imageChangedInImageView:(RenderView*)child];
        }
    }
    -(void)willDettachChild:(NSObject<MetaEnabled>*)child withName:(NSString*)name {@10
        if (([name isEqualToString:@"max"]||[name isEqualToString:@"min"]||[name isEqualToString:@"thumb"])&&[child isKindOfClass:[RenderView class]]) {
            [self.listenToImageViews removeObject:(RenderView*)child];
            if ([name isEqualToString:@"min"]) self.minimumValueImage=nil;
            else if ([name isEqualToString:@"max"]) self.maximumValueImage=nil;
            else if ([name isEqualToString:@"thumb"]) [self setThumbImage:nil forState:UIControlStateNormal];
        }
    }
    -(void)imageChangedInImageView:(URLImageView*)imageView {
        if (imageView==(URLImageView*)[self childMetaForKey:@"min"]) {
            self.minimumValueImage=imageView.image;
        }
        else if (imageView==(URLImageView*)[self childMetaForKey:@"max"]) {
            self.maximumValueImage=imageView.image;
        }
        else if (imageView==(URLImageView*)[self childMetaForKey:@"thumb"]) {
            [self setThumbImage:imageView.image forState:UIControlStateNormal];
        }
    }









MetaEnabled
    +(NSObject<MetaEnabled>*)doallocMetaEnabledOfType:(NSString*)type {
        if ([type isEqualToString:@"Toolbar"]) return([UIToolbarMetaEnabled alloc]);
    }
    +(NSSet*)viewAllowedMetaChildTypes {@"Toolbar",}

UIToolbarMetaEnabled:UIToolbar<UIToolbarMetaEnabled>
    -(NSSet*)allowedMetaChildTypes {@"ToolbarItem",}
    -(init[super initWithFrame:CGRectMake(0,0,1,1)])init {}
    -(init)initWithFrame:(CGRect)framev {}
    -(id)superInitWithFrame:(CGRect)framev {return([super initWithFrame:framev]);}
    +(id)metaInitSelf:(id)aself withMeta:(NSDictionary*)metaProps {@!0
        return([aself superInitWithFrame:[MetaEnabled frameFromMeta:metaProps]]);
    }




<UIToolbarMetaEnabled:UIViewMetaEnabled>
    -(void)didSetMetaProperty:(NSObject*)object forKey:(NSObject<NSCopying>*)key {
        if ([keyStr isEqualToString:@"style"]) {
            if ([objectStr isEqualToString:@"black"]) self.barStyle=UIBarStyleBlack;
            else self.barStyle=UIBarStyleDefault;
        }
        if ([keyStr isEqualToString:@"translucent"]) {
            self.translucent=(objectNumber?objectNumber.boolValue:NO);
        }
        if ([keyStr isEqualToString:@"tint"]) {
            UIColor *col=(objectStr?[Styler colorFromString:objectStr]:[UIColor whiteColor]);
            if (col) self.tintColor=col;
        }
    }
    -(void)didAttachChild:(NSObject<MetaEnabled>*)child withName:(NSString*)name {@!0
        NSArray *keys=[self.childMetas.allKeys sortedArrayUsingComparator:^NSComparisonResult(id obj1, id obj2) {
                          return([(NSString*)obj1 compare:obj2]);
                      }];
        NSMutableArray *a=[NSMutableArray array];
        for (kid key in keys) if ([[self childMetaForKey:key] isKindOfClass:[UIBarButtonItem class]]) {
            [a addObject:[self childMetaForKey:key]];
        }
        [self setItems:a animated:YES];
    }
    -(void)willDettachChild:(NSObject<MetaEnabled>*)child withName:(NSString*)name {@!0
        NSArray *keys=[self.childMetas.allKeys sortedArrayUsingComparator:^NSComparisonResult(id obj1, id obj2) {
                          return([(NSString*)obj1 compare:obj2]);
                      }];
        NSMutableArray *a=[NSMutableArray array];
        for (kid key in keys) if ([[self childMetaForKey:key] isKindOfClass:[UIBarButtonItem class]]) {
            [a addObject:[self childMetaForKey:key]];
        }
        [self setItems:a animated:YES];
    }









MetaEnabled
    +(NSObject<MetaEnabled>*)doallocMetaEnabledOfType:(NSString*)type {
        if ([type isEqualToString:@"ToolbarItem"]) return([UIToolbarItemMetaEnabled alloc]);
    }

UIToolbarItemMetaEnabled:UIBarButtonItem<UIToolbarItemMetaEnabled>
    CGRect framev={return(CGRectMake(0,0,20,20));}
    -(id)superInitWithBarButtonSystemItem:(UIBarButtonSystemItem)item target:(id)target action:(SEL)action {return([super initWithBarButtonSystemItem:item target:target action:action]);}
    -(id)superInitWithTitle:(NSString*)title style:(UIBarButtonItemStyle)style target:(id)target action:(SEL)action {return([super initWithTitle:title style:style target:target action:action]);}
    -(id)superInitWithImage:(UIImage*)image style:(UIBarButtonItemStyle)style target:(id)target action:(SEL)action {return([super initWithImage:image style:style target:target action:action]);}
    +(id)metaInitSelf:(id)aself withMeta:(NSDictionary*)metaProps {@!0
        NSObject *k=[metaProps objectForKey:@"style"];
        UIBarButtonItemStyle style=[__Class__ styleFromValue:[metaProps objectForKey:@"style"]];
        bool hasSys;
        UIBarButtonSystemItem sys=[__Class__ sysFromValue:[metaProps objectForKey:@"system"] retHasSys:&hasSys];

        URLImageView *iv=nil;
        UIToolbarItemMetaEnabled *me=nil;

        k=[metaProps objectForKey:@"width"];
        float width=([k isKindOfClass:[NSNumber class]]?((NSNumber*)k).floatValue:0);
        
        k=[metaProps objectForKey:@"imagekey"];
        iv=[[URLImageView alloc] initWithImageURLKey:[k isKindOfClass:[NSString class]]?(NSString*)k:nil frame:CGRectMake(0,0,20,20)];

        k=[metaProps objectForKey:@"title"];
        NSString *title=([k isKindOfClass:[NSString class]]?(NSString*)k:nil);
        
        if (iv.image) me=[aself superInitWithImage:iv.image style:style target:nil action:@selector(buttonPressed)];
        else if (hasSys) me=[aself superInitWithBarButtonSystemItem:sys target:nil action:@selector(buttonPressed)];
        else {
            me=[aself superInitWithTitle:(title?title:@"?") style:style target:nil action:@selector(buttonPressed)];
        }
        me.target=me;
        me.urlImageView=iv;
        [me.listenToImageViews addObject:iv];
        me.width=width;
        if (title) me.title=title;
        return(me);
    }





<UIToolbarItemMetaEnabled:MetaEnabled,URLImageViewListener>
    URLImageView urlImageView=nil (ivar=urlImageView,dealloc)
    +(UIBarButtonItemStyle)styleFromValue:(NSObject*)k {
        UIBarButtonItemStyle style=UIBarButtonItemStylePlain;
        if ([k isKindOfClass:[NSString class]]) {
            if ([(NSString*)k isEqualToString:@"bordered"]) style=UIBarButtonItemStyleBordered;
            else if ([(NSString*)k isEqualToString:@"done"]) style=UIBarButtonItemStyleDone;
        }
        return(style);
    }
    +(UIBarButtonSystemItem)sysFromValue:(NSObject*)k retHasSys:(bool*)phasSys {
        UIBarButtonSystemItem sys=UIBarButtonSystemItemDone;
        bool hasSys=NO;
        if ([k isKindOfClass:[NSString class]]) {
            hasSys=YES;
            if ([(NSString*)k isEqualToString:@"done"]) sys=UIBarButtonSystemItemDone;
            else if ([(NSString*)k isEqualToString:@"cancel"]) sys=UIBarButtonSystemItemCancel;
            else if ([(NSString*)k isEqualToString:@"edit"]) sys=UIBarButtonSystemItemEdit;
            else if ([(NSString*)k isEqualToString:@"save"]) sys=UIBarButtonSystemItemSave;
            else if ([(NSString*)k isEqualToString:@"add"]) sys=UIBarButtonSystemItemAdd;
            else if ([(NSString*)k isEqualToString:@"flexiblespace"]) sys=UIBarButtonSystemItemFlexibleSpace;
            else if ([(NSString*)k isEqualToString:@"fixedspace"]) sys=UIBarButtonSystemItemFixedSpace;
            else if ([(NSString*)k isEqualToString:@"compose"]) sys=UIBarButtonSystemItemCompose;
            else if ([(NSString*)k isEqualToString:@"reply"]) sys=UIBarButtonSystemItemReply;
            else if ([(NSString*)k isEqualToString:@"action"]) sys=UIBarButtonSystemItemAction;
            else if ([(NSString*)k isEqualToString:@"organize"]) sys=UIBarButtonSystemItemOrganize;
            else if ([(NSString*)k isEqualToString:@"bookmarks"]) sys=UIBarButtonSystemItemBookmarks;
            else if ([(NSString*)k isEqualToString:@"search"]) sys=UIBarButtonSystemItemSearch;
            else if ([(NSString*)k isEqualToString:@"refresh"]) sys=UIBarButtonSystemItemRefresh;
            else if ([(NSString*)k isEqualToString:@"stop"]) sys=UIBarButtonSystemItemStop;
            else if ([(NSString*)k isEqualToString:@"camera"]) sys=UIBarButtonSystemItemCamera;
            else if ([(NSString*)k isEqualToString:@"trash"]) sys=UIBarButtonSystemItemTrash;
            else if ([(NSString*)k isEqualToString:@"play"]) sys=UIBarButtonSystemItemPlay;
            else if ([(NSString*)k isEqualToString:@"pause"]) sys=UIBarButtonSystemItemPause;
            else if ([(NSString*)k isEqualToString:@"rewind"]) sys=UIBarButtonSystemItemRewind;
            else if ([(NSString*)k isEqualToString:@"fastforward"]) sys=UIBarButtonSystemItemFastForward;
            else if ([(NSString*)k isEqualToString:@"undo"]) sys=UIBarButtonSystemItemUndo;
            else if ([(NSString*)k isEqualToString:@"redo"]) sys=UIBarButtonSystemItemRedo;
            else if ([(NSString*)k isEqualToString:@"pagecurl"]) sys=UIBarButtonSystemItemPageCurl;
            else hasSys=NO;
        }
        if (phasSys) *phasSys=hasSys;
        return(sys);
    }
    NSObject currentTarget={
        NSObject *target=(finalAction?([self.nearestViewer respondsToSelector:finalAction]?(NSObject*)self.nearestViewer:(
            [self.nearestViewer.dataModel respondsToSelector:finalAction]?(NSObject*)self.nearestViewer.dataModel:nil)):nil);
        return(target);
    }
    +(SEL)actionFromValue:(NSObject*)k {
        SEL sel=nil;
        if ([k isKindOfClass:[NSString class]]) sel=NSSelectorFromString((NSString*)k);
        return(sel);
    }
    SEL finalAction=nil (readonly)
    -(void)didSetMetaProperty:(NSObject*)object forKey:(NSObject<NSCopying>*)key {
        if ([keyStr isEqualToString:@"title"]) self.title=objectStr;
        else if ([keyStr isEqualToString:@"imagekey"]) urlImageView.imageURLKey=objectStr;
        else if ([keyStr isEqualToString:@"style"]) self.style=[__Class__ styleFromValue:object];
        else if ([keyStr isEqualToString:@"action"]) finalAction=[__Class__ actionFromValue:object];
        else if ([keyStr isEqualToString:@"width"]) self.width=(objectNumber?objectNumber.floatValue:0.0f);
    }
    -(void)imageChangedInImageView:(URLImageView*)imageView {
        self.image=imageView.image;
    }
    -(void)buttonPressed {
        [self.currentTarget performSelector:self.finalAction];
    }
    
    

MetaEnabled
    +(NSObject<MetaEnabled>*)doallocMetaEnabledOfType:(NSString*)type {
        if ([type isEqualToString:@"View"]) return([UIViewMetaEnabled alloc]);
        if ([type isEqualToString:@"Rend"]) return([RenderView alloc]);
        if ([type isEqualToString:@"Label"]) return([UILabelViewMetaEnabled alloc]);
        if ([type isEqualToString:@"Slider"]) return([UISliderMetaEnabled alloc]);
    }
    +(NSSet*)viewAllowedMetaChildTypes {@-10 return([NSSet setWithObjects:@10 @"View",@"Rend",@"Label",@"Slider",nil]);}
    +(CGRect)frameFromMeta:(NSDictionary*)metaProps {
        CGRect framev=CGRectMake(0,0,1,1);
        {
            NSObject *object=[metaProps objectForKey:@"frame"];
            if ([object isKindOfClass:[NSArray class]]&&(((NSArray*)object).count==4)) {
                NSArray *a=(NSArray*)object;
                if (
                [[a objectAtIndex:0] isKindOfClass:[NSNumber class]]&&
                [[a objectAtIndex:1] isKindOfClass:[NSNumber class]]&&
                [[a objectAtIndex:2] isKindOfClass:[NSNumber class]]&&
                [[a objectAtIndex:3] isKindOfClass:[NSNumber class]]) {
                    framev=CGRectMake(
                        ((NSNumber*)[a objectAtIndex:0]).floatValue,
                        ((NSNumber*)[a objectAtIndex:1]).floatValue,
                        ((NSNumber*)[a objectAtIndex:2]).floatValue,
                        ((NSNumber*)[a objectAtIndex:3]).floatValue
                    );
                }
            }
        }
        return(framev);
    }

UIViewMetaEnabled:UIView<UIViewMetaEnabled>
    -(NSSet*)allowedMetaChildTypes {@-20 return([MetaEnabled viewAllowedMetaChildTypes]);}
    -(init[super initWithFrame:CGRectMake(0,0,1,1)])init {}
    -(init)initWithFrame:(CGRect)framev {}
    -(id)superInitWithFrame:(CGRect)framev {return([super initWithFrame:framev]);}
    +(id)metaInitSelf:(id)aself withMeta:(NSDictionary*)metaProps {@!0
        return([aself superInitWithFrame:[MetaEnabled frameFromMeta:metaProps]]);
    }

UIViewMetaEnabledDataModelViewer:UIView<UIViewMetaEnabled,DataModelViewer>
    -(NSSet*)allowedMetaChildTypes {@-20 return([MetaEnabled viewAllowedMetaChildTypes]);}
    -(init[super initWithFrame:CGRectMake(0,0,1,1)])init {}
    -(init)initWithFrame:(CGRect)framev {}
    -(id)superInitWithFrame:(CGRect)framev {return([super initWithFrame:framev]);}
    +(id)metaInitSelf:(id)aself withMeta:(NSDictionary*)metaProps {@!0
        return([aself superInitWithFrame:[MetaEnabled frameFromMeta:metaProps]]);
    }


UILabelViewMetaEnabled:UILabel<UILabelViewMetaEnabled>
    -(init[super initWithFrame:CGRectMake(0,0,1,1)])init {}
    -(init)initWithFrame:(CGRect)framev {}
    -(id)superInitWithFrame:(CGRect)framev {return([super initWithFrame:framev]);}
    +(id)metaInitSelf:(id)aself withMeta:(NSDictionary*)metaProps {@!0
        return([aself superInitWithFrame:[MetaEnabled frameFromMeta:metaProps]]);
    }

UITableViewCellMetaEnabled:UITableViewCell<ModelTableViewCell,UIViewMetaEnabled>
    -(void)refreshMetaEnabledURLs {
        if ([self.cellModel.section.table conformsToProtocol:@protocol(UITableViewMetaEnabled)]) {
            [((NSObject<UITableViewMetaEnabled>*)self.cellModel.section.table).tableModelFollower.model markDirty];
        }
    }

    -(NSSet*)allowedMetaChildTypes {@-20 return([MetaEnabled viewAllowedMetaChildTypes]);}
    -(void)didAttachChild:(NSObject<MetaEnabled>*)child withName:(NSString*)name {
        if ([child isKindOfClass:[UIView class]]) {
            [MetaEnabled addSubview:(UIView*)child withName:name parentView:self.contentView];
        }
    }
    -(void)willDettachChild:(NSObject<MetaEnabled>*)child withName:(NSString*)name {
        if ([child isKindOfClass:[UIView class]]) [(UIView*)child removeFromSuperview];
    }
    -(init[super initWithStyle:style reuseIdentifier:reuseIdentifier])initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString*)reuseIdentifier meta:(NSDictionary*)metaProps parent:(NSObject<MetaEnabled>*)aparent key:(id<NSCopying>)keyInParent {
        [self metaEnabledPartialInitWithMeta:metaProps parent:aparent key:keyInParent];
    }
    -(init)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString*)reuseIdentifier {
    }
    -(id)superInitWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString*)reuseIdentifier {return([super initWithStyle:style reuseIdentifier:reuseIdentifier]);}
    +(id)metaInitSelf:(id)aself withMeta:(NSDictionary*)metaProps {@!0
        UITableViewCellStyle style=UITableViewCellStyleDefault;
        NSString *reuseIdentifier=[metaProps objectForKey:@"reuseid"];
        if (!reuseIdentifier) {
            ERR("Need a reuseid");
            reuseIdentifier=@"??";
        }
        return([aself superInitWithStyle:style reuseIdentifier:reuseIdentifier]);
    }
    MutableDictionaryFollowerDelegate modelFollowDel=[[MutableDictionaryFollowerDelegate alloc] init] (publicreadonly,ivar=modelFollowDel,dealloc)
    -(init) {
        modelFollowDel.followerDictionary=self._myProperties;
    }
    -(void)willChangeValueFrom:(id)fromObject to:(id)toObject {
        if ([(NSObject*)fromObject conformsToProtocol:@protocol(HasProperties)]) {
            [((NSObject<HasProperties>*)fromObject)._properties removeDelegate:modelFollowDel];
        }
        if ([(NSObject*)toObject conformsToProtocol:@protocol(HasProperties)]) {
            [((NSObject<HasProperties>*)toObject)._properties addDelegate:modelFollowDel];
        }
    }

        



<UITableViewMetaEnabled:UIViewMetaEnabled>
    <StdTableModelFollower> tableModelFollower=nil (assign,ivar=tableModelFollower)
    -(void)refreshMetaEnabledURLs {
        [tableModelFollower.model markDirty];
    }
    -(init[super initWithFrame:framev style:UITableViewStylePlain])initWithFrame:(CGRect)framev {
        self.separatorStyle=UITableViewCellSeparatorStyleNone;
    }
    -(id)superInitWithFrame:(CGRect)framev style:(UITableViewStyle)style {return([super initWithFrame:framev style:style]);}
    +(id)metaInitSelf:(id)aself withMeta:(NSDictionary*)metaProps {@!0
        UITableViewStyle style=UITableViewStylePlain;
        {
            NSString *styleStr=[metaProps objectForKey:@"tableStyle"];
            if ([styleStr isEqualToString:@"grouped"]) style=UITableViewStyleGrouped;
        }
        __Class__ *me=[aself superInitWithFrame:[MetaEnabled frameFromMeta:metaProps] style:style];
        me.separatorStyle=UITableViewCellSeparatorStyleNone;
        return(me);
    }
    -(void)didSetMetaProperty:(NSObject*)object forKey:(NSObject<NSCopying>*)key {
        {
            if ([key isEqual:@"separator"]) {
                UITableViewCellSeparatorStyle style=UITableViewCellSeparatorStyleNone;
                if ([objectStr isEqualToString:@"singleline"]) style=UITableViewCellSeparatorStyleSingleLine;
                if ([objectStr isEqualToString:@"singlelineetched"]) style=UITableViewCellSeparatorStyleSingleLineEtched;
                self.separatorStyle=style;
            }
        }
    }


















RenderView:URLImageView<UIViewMetaEnabled,MetaEnabled>

    -(void)waited {@-500 [super waited];}

    -(id)superInitWithImageURLKey:(NSString*)aimageURLKey highlightedImageURLKey:(NSString*)ahighlightedImageURLKey frame:(CGRect)framev {
        return([super initWithImageURLKey:aimageURLKey highlightedImageURLKey:ahighlightedImageURLKey frame:framev]);
    }
    +(id)metaInitSelf:(id)aself withMeta:(NSDictionary*)metaProps {@!0
        return([aself superInitWithImageURLKey:[metaProps objectForKey:@"imagekey"]
            highlightedImageURLKey:[metaProps objectForKey:@"highlightedimagekey"]
            frame:[MetaEnabled frameFromMeta:metaProps]]);
    }

    -(init)initWithImageURL:(NSURL*)aurl frame:(CGRect)framev {}
    -(init)initWithImageURL:(NSURL*)aimageURL highlightedImageURL:(NSURL*)ahighlightedImageURL frame:(CGRect)framev {}
    -(init)initWithImageURLKey:(NSString*)aurlKey frame:(CGRect)framev {}
    -(init)initWithImageURLKey:(NSString*)aimageURLKey highlightedImageURLKey:(NSString*)ahighlightedImageURLKey frame:(CGRect)framev {}

    -(init[super initWithImageURL:nil frame:CGRectMake(0,0,1,1)])init {}
    -(init[super initWithImageURL:nil frame:framev])initWithFrame:(CGRect)framev {}

    -(void)didSetMetaProperty:(NSObject*)object forKey:(NSObject<NSCopying>*)key {
        {
            if ([key isEqual:@"imagekey"]) {
                self.imageURLKey=objectStr;
            }
            if ([key isEqual:@"highlightedimagekey"]) {
                self.highlightedImageURLKey=objectStr;
            }
        }
    }




<MetaComponentClass>
    -(NSString*)metaURLKey;
<MetaComponent>
    +(NSString*)metaURLKey;
    +(float)heightFromURL {
        float ret=0;
        NSString *key=[__Class__ metaURLKey];
        if (key) {
            NSObject *o=[g_singletons.metaEnabledURLRegistry objectForKey:key];
            if ([o isKindOfClass:[NSURL class]]) {
                NSURL *url=(NSURL*)o;
                NSString *s=url.absoluteString;
                NSError *error=nil;
                NSRegularExpression *regex=[NSRegularExpression regularExpressionWithPattern:@"uheight=U(\\d+(?:\\.\\d+)?)" options:0 error:&error];
                if (error) ERR("Bad regex height");
                NSTextCheckingResult *match=[regex firstMatchInString:s options:0 range:NSMakeRange(0, [s length])];
                if (match) {
                    ret=[[s substringWithRange:[match rangeAtIndex:1]] floatValue];
                }
            }
        }
        return(ret);
    }
    -(void)reloadMetasFromURLKey {
        NSDictionary *d=[NSDictionary dictionaryWithObjectsAndKeys:@"urlkey",[__Class__ metaURLKey],nil];
        self.metaProperties=d;
        [self refreshMetaFromRegisteredURLs];
    }
        
            






